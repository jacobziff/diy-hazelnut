// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1

//# unitInfo: Provides: Virtual_dom__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Virtual_dom = [0];
   runtime.caml_register_global(0, Virtual_dom, "Virtual_dom__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Dom_float
//# unitInfo: Requires: Core, Core__Float, Expect_test_collector, Expect_test_common__File, Expect_test_config, Inline_test_config, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst_Virtual_dom_Dom_float = "Virtual_dom__Dom_float",
    cst_src_dom_float_ml$6 = "src/dom_float.ml",
    cst_virtual_dom = "virtual_dom",
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call9(f, a0, a1, a2, a3, a4, a5, a6, a7, a8){
    return (f.l >= 0 ? f.l : f.l = f.length) == 9
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7, a8]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    Core = global_data.Core,
    Expect_test_common_File = global_data.Expect_test_common__File,
    Core_Float = global_data.Core__Float,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Expect_test_config = global_data.Expect_test_config,
    Inline_test_config = global_data.Inline_test_config;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Dom_float);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], cst_src_dom_float_ml$6);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   function to_js_string(value){return value.toString();}
   function to_js_string_fixed(digits, value){return value.toFixed(digits);}
   function to_js_string_precision(digits, value){return value.toPrecision(digits);
   }
   function to_js_string_exponential(value){return value.toExponential();}
   function to_string(value){
    return caml_string_of_jsstring(value.toString());
   }
   function to_string_fixed(digits, value){
    return caml_string_of_jsstring(value.toFixed(digits));
   }
   function to_string_precision(digits, value){
    return caml_string_of_jsstring(value.toPrecision(digits));
   }
   function to_string_exponential(value){
    return caml_string_of_jsstring(value.toExponential());
   }
   var
    Expect_test_collector$0 =
      caml_call1(Expect_test_collector[2], Expect_test_config),
    _a_ = [0, [2, 0, 0], "%s"],
    cst_src_dom_float_ml = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$0 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$1 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$2 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$3 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$4 = cst_src_dom_float_ml$6,
    cst_src_dom_float_ml$5 = cst_src_dom_float_ml$6,
    _b_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       16,
       738,
       749,
       756],
    _c_ =
      [0,
       [0,
        [0, cst$0],
        [1, " 1 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         16,
         738,
         742,
         748],
        _b_],
       0],
    _d_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       18,
       778,
       789,
       798],
    _e_ =
      [0,
       [0,
        [0, cst$0],
        [1, " NaN "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         18,
         778,
         782,
         788],
        _d_],
       _c_],
    _f_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       20,
       825,
       836,
       850],
    _g_ =
      [0,
       [0,
        [0, cst$0],
        [1, " Infinity "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         20,
         825,
         829,
         835],
        _f_],
       _e_],
    _h_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       22,
       881,
       892,
       907],
    _i_ =
      [0,
       [0,
        [0, cst$0],
        [1, " -Infinity "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         22,
         881,
         885,
         891],
        _h_],
       _g_],
    _j_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       24,
       930,
       941,
       951],
    _k_ =
      [0,
       [0,
        [0, cst$0],
        [1, " 1e-8 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         24,
         930,
         934,
         940],
        _j_],
       _i_],
    _l_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       26,
       969,
       980,
       988],
    _m_ =
      [0,
       [0,
        [0, cst$0],
        [1, " -1 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         26,
         969,
         973,
         979],
        _l_],
       _k_],
    _n_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       28,
       1010,
       1021,
       1036],
    _o_ =
      [0,
       [0,
        [0, cst$0],
        [1, " 1.0000001 "],
        [0,
         caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
         28,
         1010,
         1014,
         1020],
        _n_],
       _m_],
    _p_ =
      [0,
       caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$6),
       12,
       642,
       642,
       1037],
    _q_ =
      caml_call1
       (Expect_test_common_File[4][3], "e40141a8c595182b4ac2018c0f4b5904");
   caml_call9
    (Expect_test_collector$0[3],
     _q_,
     _p_,
     cst_src_dom_float_ml$6,
     0,
     0,
     _o_,
     0,
     Inline_test_config,
     function(param){
      function print(f){
       var _y_ = to_string(f);
       return caml_call2(Core[250], _a_, _y_);
      }
      print(1.);
      var
       _r_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml),
          16,
          738,
          742,
          748];
      caml_call1(Expect_test_collector$0[1], _r_);
      print(Core_Float[9]);
      var
       _s_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$0),
          18,
          778,
          782,
          788];
      caml_call1(Expect_test_collector$0[1], _s_);
      print(Core_Float[10]);
      var
       _t_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$1),
          20,
          825,
          829,
          835];
      caml_call1(Expect_test_collector$0[1], _t_);
      print(Core_Float[11]);
      var
       _u_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$2),
          22,
          881,
          885,
          891];
      caml_call1(Expect_test_collector$0[1], _u_);
      print(1e-8);
      var
       _v_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$3),
          24,
          930,
          934,
          940];
      caml_call1(Expect_test_collector$0[1], _v_);
      print(-1.);
      var
       _w_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$4),
          26,
          969,
          973,
          979];
      caml_call1(Expect_test_collector$0[1], _w_);
      print(1.0000001);
      var
       _x_ =
         [0,
          caml_call1(Expect_test_common_File[1][6], cst_src_dom_float_ml$5),
          28,
          1010,
          1014,
          1020];
      return caml_call1(Expect_test_collector$0[1], _x_);
     });
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Dom_float);
   var
    Virtual_dom_Dom_float =
      [0,
       to_js_string,
       to_js_string_fixed,
       to_js_string_precision,
       to_js_string_exponential,
       to_string,
       to_string_fixed,
       to_string_precision,
       to_string_exponential];
   runtime.caml_register_global
    (63, Virtual_dom_Dom_float, cst_Virtual_dom_Dom_float);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Effect
//# unitInfo: Requires: Base__Hashtbl, Base__List, Base__Option, Expect_test_collector, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Stdlib__Obj, Ui_effect
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Effect = "Virtual_dom__Effect",
    cst_virtual_dom = "virtual_dom",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Base_Option = global_data.Base__Option,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Base_List = global_data.Base__List,
    Ui_effect = global_data.Ui_effect,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Base_Hashtbl = global_data.Base__Hashtbl;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Effect);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/effect.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   var
    Ignore = Ui_effect[1],
    Many = Ui_effect[2],
    symbol_bind = Ui_effect[3],
    symbol_map = Ui_effect[4],
    bind = Ui_effect[6],
    return$0 = Ui_effect[7],
    map = Ui_effect[8],
    join = Ui_effect[9],
    ignore_m = Ui_effect[10],
    all = Ui_effect[11],
    all_unit = Ui_effect[12],
    never = Ui_effect[14],
    lazy = Ui_effect[15],
    print_s = Ui_effect[16],
    of_sync_fun = Ui_effect[17],
    Expert = Ui_effect[20],
    visibility_handlers = [0, 0];
   function Define_visibility(VH){
    visibility_handlers[1] = [0, VH[1], visibility_handlers[1]];
    return [0];
   }
   var
    Viewport_changed =
      [248, "Virtual_dom__Effect.Viewport_changed", caml_fresh_oo_id(0)],
    Stop_propagation =
      [248, "Virtual_dom__Effect.Stop_propagation", caml_fresh_oo_id(0)],
    Stop_immediate_propagation =
      [248,
       "Virtual_dom__Effect.Stop_immediate_propagation",
       caml_fresh_oo_id(0)],
    Prevent_default =
      [248, "Virtual_dom__Effect.Prevent_default", caml_fresh_oo_id(0)];
   function sequence_as_sibling(left, unless_stopped){
    function contains_stop(param){
     if(param[1] !== Many)
      return param === Stop_immediate_propagation ? 1 : 0;
     var es = param[2];
     return caml_call2(Base_List[13], es, contains_stop);
    }
    if(contains_stop(left)) return left;
    var _g_ = [0, left, [0, caml_call1(unless_stopped, 0), 0]];
    return [0, Ui_effect[2], _g_];
   }
   var
    current_dom_event = [0, 0],
    _a_ = caml_call1(Stdlib_Obj[22][1], Viewport_changed),
    _b_ = caml_call1(Stdlib_Obj[22][3], _a_);
   caml_call3
    (Base_Hashtbl[36],
     Expert[2],
     _b_,
     function(param){
      return caml_call2
              (Base_List[9],
               visibility_handlers[1],
               function(f){return caml_call1(f, 0);});
     });
   var
    _c_ = caml_call1(Stdlib_Obj[22][1], Stop_propagation),
    _d_ = caml_call1(Stdlib_Obj[22][3], _c_);
   caml_call3
    (Base_Hashtbl[36],
     Expert[2],
     _d_,
     function(param){
      return caml_call2
              (Base_Option[34],
               current_dom_event[1],
               Js_of_ocaml_Dom_html[117]);
     });
   var
    _e_ = caml_call1(Stdlib_Obj[22][1], Prevent_default),
    _f_ = caml_call1(Stdlib_Obj[22][3], _e_);
   caml_call3
    (Base_Hashtbl[36],
     Expert[2],
     _f_,
     function(param){
      return caml_call2
              (Base_Option[34], current_dom_event[1], Js_of_ocaml_Dom[18]);
     });
   var handle_non_dom_event_exn = Expert[1];
   function handle(dom_event, event){
    var old = current_dom_event[1];
    current_dom_event[1] = [0, dom_event];
    caml_call1(Expert[1], event);
    current_dom_event[1] = old;
    return 0;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Effect);
   var
    Virtual_dom_Effect =
      [0,
       Ignore,
       Many,
       symbol_bind,
       symbol_map,
       bind,
       return$0,
       map,
       join,
       ignore_m,
       all,
       all_unit,
       never,
       lazy,
       print_s,
       of_sync_fun,
       Viewport_changed,
       Stop_propagation,
       Stop_immediate_propagation,
       Prevent_default,
       sequence_as_sibling,
       Define_visibility,
       [0, handle, handle_non_dom_event_exn]];
   runtime.caml_register_global
    (22, Virtual_dom_Effect, cst_Virtual_dom_Effect);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Gen_js_api
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Gen_js_api = "Virtual_dom__Gen_js_api",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Gen_js_api);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/gen_js_api.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Gen_js_api);
   var Virtual_dom_Gen_js_api = [0];
   runtime.caml_register_global
    (11, Virtual_dom_Gen_js_api, cst_Virtual_dom_Gen_js_api);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Hooks_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Hooks_intf = "Virtual_dom__Hooks_intf",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Hooks_intf);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/hooks_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Hooks_intf);
   var Virtual_dom_Hooks_intf = [0];
   runtime.caml_register_global
    (11, Virtual_dom_Hooks_intf, cst_Virtual_dom_Hooks_intf);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Hooks
//# unitInfo: Requires: CamlinternalLazy, Core, Core__Type_equal, Expect_test_collector, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_Virtual_dom_Hooks = "Virtual_dom__Hooks",
    cst_virtual_dom = "virtual_dom",
    caml_js_wrap_callback = runtime.caml_js_wrap_callback;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$2,
    cst$1 = cst$2,
    cst = cst$2,
    Core = global_data.Core,
    Core_Type_equal = global_data.Core__Type_equal,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Hooks);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/hooks.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   function sexp_of_t(param){
    var value = param[2], type_id = param[1];
    return caml_call2(Core_Type_equal[8][6], type_id, value);
   }
   var
    Extra = [0, sexp_of_t],
    generic_hook =
      [246, function(param){return Js_of_ocaml_Js[52][1].GenericHook;}],
    cst_hooks_do_not_have_the_same =
      "hooks do not have the same type, so they cannot be combined; taking the second of the two";
   function pack(param){
    var
     id = param[7],
     destroy = param[6],
     update = param[5],
     init = param[4],
     input_id = param[2],
     input = param[1],
     a = caml_call1(init, input),
     init$0 = caml_js_wrap_callback(a),
     a$0 = caml_call1(update, input),
     update$0 = caml_js_wrap_callback(a$0),
     destroy$0 = caml_js_wrap_callback(destroy),
     _h_ = runtime.caml_obj_tag(generic_hook),
     generic_hook$0 =
       250 === _h_
        ? generic_hook[1]
        : 246
          === _h_
          ? caml_call1(CamlinternalLazy[2], generic_hook)
          : generic_hook,
     extra = [0, input_id, input];
    return generic_hook$0(init$0, update$0, destroy$0, id, extra);
   }
   function combine(left, right){
    if(caml_call2(Core_Type_equal[8][9], left[2], right[2])){
     var
      _a_ = right[7],
      _b_ = right[6],
      _c_ = right[5],
      _d_ = right[4],
      _e_ = right[3],
      _f_ = right[2];
     return [0,
             caml_call2(right[3], left[1], right[1]),
             _f_,
             _e_,
             _d_,
             _c_,
             _b_,
             _a_];
    }
    var
     _g_ = caml_call1(Sexplib0_Sexp_conv[7], cst_hooks_do_not_have_the_same);
    caml_call2(Core[249], 0, _g_);
    return right;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Hooks);
   var
    Virtual_dom_Hooks =
      [0,
       combine,
       pack,
       function(S){
        var
         input_and_state_id =
           caml_call2
            (Core_Type_equal[8][3],
             cst$0,
             function(param){
              var
               arg1_002 = param[3],
               arg0_001 = param[1],
               res0_003 = caml_call1(S[2][1], arg0_001),
               res1_004 = caml_call1(Core[150], arg1_002);
              return [1, [0, res0_003, [0, res1_004, 0]]];
             }),
         input_id = caml_call2(Core_Type_equal[8][3], cst$1, S[2][1]);
        function init(input, element){
         var state = caml_call2(S[3], input, element);
         function f(param){return caml_call3(S[4], input, state, element);}
         var
          t2 = caml_js_wrap_callback(f),
          t3 = Js_of_ocaml_Dom_html[8],
          animation_id = t3.requestAnimationFrame(t2);
         return [0, input, animation_id, state];
        }
        function update(input, param, element){
         var state = param[3], animation_id = param[2], old_input = param[1];
         caml_call4(S[5], old_input, input, state, element);
         return [0, input, animation_id, state];
        }
        function destroy(param, element){
         var
          state = param[3],
          animation_id = param[2],
          old_input = param[1],
          t1 = Js_of_ocaml_Dom_html[8];
         t1.cancelAnimationFrame(animation_id);
         return caml_call3(S[6], old_input, state, element);
        }
        function create(input){
         var combine_inputs = S[2][2];
         return [0,
                 input,
                 input_id,
                 combine_inputs,
                 init,
                 update,
                 destroy,
                 input_and_state_id];
        }
        var For_testing = [0, input_id];
        return [0, create, For_testing];
       },
       [0, Extra]];
   runtime.caml_register_global(23, Virtual_dom_Hooks, cst_Virtual_dom_Hooks);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Js_map
//# unitInfo: Requires: Expect_test_collector, Ojs, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Js_map = "Virtual_dom__Js_map",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ojs = global_data.Ojs,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Js_map);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/js_map.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   function create(param){var x2 = new Ojs[19]["Map"]; return x2;}
   function set(x7, x5, x6){x7.set(x5, x6); return 0;}
   function get(x11, x10){
    var _a_ = x11.get(x10);
    return caml_call2(Ojs[7], function(_b_){return _b_;}, _a_);
   }
   function delete$0(x16, x15){x16.delete(x15); return 0;}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Js_map);
   var Virtual_dom_Js_map = [0, create, set, get, delete$0];
   runtime.caml_register_global
    (16, Virtual_dom_Js_map, cst_Virtual_dom_Js_map);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Raw
//# unitInfo: Requires: Base, Base__Type_equal, Expect_test_collector, Js_of_ocaml__Js, Ojs, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Virtual_dom__Js_map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_VirtualDom = "VirtualDom",
    cst_Virtual_dom_Raw = "Virtual_dom__Raw",
    cst_attributes$0 = "attributes",
    cst_virtual_dom = "virtual_dom",
    caml_js_from_string = runtime.caml_js_from_string,
    caml_js_set = runtime.caml_js_set,
    caml_js_wrap_callback = runtime.caml_js_wrap_callback;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Base_Type_equal = global_data.Base__Type_equal,
    Virtual_dom_Js_map = global_data.Virtual_dom__Js_map,
    Base = global_data.Base,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ojs = global_data.Ojs,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Raw);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/raw.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   function t_of_js(x){return x;}
   function t_to_js(x){return x;}
   var Native_node = [0, t_of_js, t_to_js];
   function t_of_js$0(x){return x;}
   function t_to_js$0(x){return x;}
   function create(param){return caml_call1(Ojs[11], 0);}
   var
    set_property = caml_js_set,
    has_property = Ojs[12],
    cst_attributes = cst_attributes$0;
   function has_attribute(t, name){
    var _x_ = caml_call2(Ojs[12], t, cst_attributes);
    if(! _x_) return _x_;
    var _y_ = t[cst_attributes$0];
    return caml_call2(Ojs[12], _y_, name);
   }
   function set_attribute(t, name, value){
    var _w_ = t[cst_attributes$0];
    if(caml_call2(Base[203], _w_, undefined))
     t[cst_attributes$0] = caml_call1(Ojs[11], 0);
    return t[cst_attributes$0][name] = value;
   }
   var
    Attrs =
      [0,
       t_of_js$0,
       t_to_js$0,
       create,
       has_property,
       has_attribute,
       set_property,
       set_attribute];
   function t_of_js$1(param){return function(_v_){return _v_;};}
   function t_to_js$1(param){return function(_u_){return _u_;};}
   var Element_array = [0, t_of_js$1, t_to_js$1];
   function t_of_js$2(x2){return x2;}
   function t_to_js$2(x1){return x1;}
   function node(x3, x4, x5, x7){
    var
     _q_ = caml_call2(Ojs[8], caml_js_from_string, x7),
     _r_ = caml_call2(Element_array[2], t_to_js$2, x5),
     _s_ = caml_call1(Attrs[2], x4),
     _t_ = caml_js_from_string(x3),
     x2 = new Ojs[19][cst_VirtualDom]["VNode"](_t_, _s_, _r_, _q_);
    return x2;
   }
   function text(x9){
    var
     _p_ = caml_js_from_string(x9),
     x2 = new Ojs[19][cst_VirtualDom]["VText"](_p_);
    return x2;
   }
   function svg(x10, x11, x12, x14){
    var
     _l_ = caml_call2(Ojs[8], caml_js_from_string, x14),
     _m_ = caml_call2(Element_array[2], t_to_js$2, x12),
     _n_ = caml_call1(Attrs[2], x11),
     _o_ = caml_js_from_string(x10),
     x2 = new Ojs[19][cst_VirtualDom]["svg"](_o_, _n_, _m_, _l_);
    return x2;
   }
   function to_dom(x16){
    var _k_ = Ojs[19][cst_VirtualDom].createElement(x16);
    return caml_call1(Native_node[1], _k_);
   }
   var Node = [0, t_of_js$2, t_to_js$2, node, text, svg, to_dom];
   function t_of_js$3(x18){return x18;}
   function t_to_js$3(x17){return x17;}
   function create$0(x19, x20){
    var
     _i_ = caml_call1(Node[2], x20),
     _j_ = caml_call1(Node[2], x19),
     x18 = Ojs[19][cst_VirtualDom].diff(_j_, _i_);
    return x18;
   }
   function apply(x21, x22){
    var
     _g_ = caml_call1(Native_node[2], x21),
     _h_ = Ojs[19][cst_VirtualDom].patch(_g_, x22);
    return caml_call1(Native_node[1], _h_);
   }
   function f(patch){
    for(var key in patch) if(key !== "a") return false;
    return true;
   }
   function is_empty(t){return f(t) | 0;}
   var
    Patch = [0, t_of_js$3, t_to_js$3, create$0, apply, is_empty],
    t = caml_call1(Virtual_dom_Js_map[1], 0),
    _a_ = [0, "<opaque>"],
    _b_ = [0, "id_sexp"],
    cst_BUG_element_state_not_foun = "BUG: element state not found";
   function set(id, element, state){
    return caml_call3(Virtual_dom_Js_map[2], t, element, [0, id, state]);
   }
   function get(id, element){
    var match = caml_call2(Virtual_dom_Js_map[3], t, element);
    if(match){
     var match$0 = match[1], state = match$0[2], f_id = match$0[1];
     caml_call2(Base_Type_equal[12][11], id, f_id);
     return state;
    }
    var
     id_sexp =
       caml_call2(Base_Type_equal[12][1], function(param){return _a_;}, id),
     _e_ = [0, [1, [0, _b_, [0, caml_call1(Base[84][4], id_sexp), 0]]], 0],
     _f_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_element_state_not_foun),
         _e_]];
    return caml_call1(Base[202], _f_);
   }
   function delete$0(element){
    return caml_call2(Virtual_dom_Js_map[4], t, element);
   }
   var State_keeper = [0, t, set, get, delete$0];
   function create$1(info, opt, _c_, id){
    if(opt)
     var sth = opt[1], destroy = sth;
    else
     var destroy = function(param, _d_){return;};
    if(_c_)
     var sth$0 = _c_[1], update = sth$0;
    else
     var update = function(s, elt){return [0, s, elt];};
    return function(init, param){
     var obj = {};
     obj.type = "Widget";
     obj.name = 0;
     obj.id = id;
     obj.info = info;
     var
      t8 =
        caml_js_wrap_callback
         (function(param){
           var
            match = caml_call1(init, 0),
            dom_node = match[2],
            s0 = match[1];
           caml_call3(State_keeper[2], id, dom_node, s0);
           return dom_node;
          });
     obj.init = t8;
     var
      t11 =
        caml_js_wrap_callback
         (function(prev, dom_node){
           caml_call2(Base_Type_equal[12][11], prev.id, id);
           var
            prev_state = caml_call2(State_keeper[3], id, dom_node),
            match = caml_call2(update, prev_state, dom_node),
            dom_node$0 = match[2],
            state = match[1];
           caml_call1(State_keeper[4], dom_node);
           caml_call3(State_keeper[2], id, dom_node$0, state);
           return dom_node$0;
          });
     obj.update = t11;
     var
      t13 =
        caml_js_wrap_callback
         (function(dom_node){
           var prev_state = caml_call2(State_keeper[3], id, dom_node);
           caml_call2(destroy, prev_state, dom_node);
           return caml_call1(State_keeper[4], dom_node);
          });
     obj.destroy = t13;
     return caml_call1(Node[1], obj);};
   }
   var Widget = [0, State_keeper, create$1];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Raw);
   var
    Virtual_dom_Raw =
      [0, Native_node, Attrs, Element_array, Node, Patch, Widget];
   runtime.caml_register_global(47, Virtual_dom_Raw, cst_Virtual_dom_Raw);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Attr
//# unitInfo: Requires: Core, Core__Bool, Core__Char, Core__Int, Core__List, Core__Map, Core__Option, Core__Set, Core__String, Core__Type_equal, Core__Unit, Css_gen, Expect_test_collector, Inline_test_config, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ojs, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_effect, Virtual_dom__Dom_float, Virtual_dom__Effect, Virtual_dom__Hooks, Virtual_dom__Raw
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst_Virtual_dom_Attr = "Virtual_dom__Attr",
    cst$8 = "_",
    cst_class$1 = "class",
    cst_first = "first",
    cst_focus$0 = "focus",
    cst_input$1 = "input",
    cst_name$0 = "name",
    cst_on$1 = "on",
    cst_second = "second",
    cst_src_attr_ml = "src/attr.ml",
    cst_style$1 = "style",
    cst_target$0 = "target",
    cst_value$2 = "value",
    cst_virtual_dom = "virtual_dom",
    caml_js_from_string = runtime.caml_js_from_string,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    name$1 = "single-focus-hook",
    name$0 = "always-focus-hook",
    cst$6 = cst$7,
    cst$0 = cst$7,
    cst = cst$7,
    empty = [6, 0],
    cst$1 = cst$7,
    cst$2 = cst$7,
    cst$3 = cst$7,
    cst$4 = cst$7,
    cst$5 = cst$7,
    Core_List = global_data.Core__List,
    Core = global_data.Core,
    Core_String = global_data.Core__String,
    Css_gen = global_data.Css_gen,
    Core_Set = global_data.Core__Set,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Ui_effect = global_data.Ui_effect,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Virtual_dom_Hooks = global_data.Virtual_dom__Hooks,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Core_Option = global_data.Core__Option,
    Core_Type_equal = global_data.Core__Type_equal,
    Core_Bool = global_data.Core__Bool,
    Core_Int = global_data.Core__Int,
    Core_Char = global_data.Core__Char,
    Virtual_dom_Raw = global_data.Virtual_dom__Raw,
    Core_Map = global_data.Core__Map,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Ojs = global_data.Ojs,
    Virtual_dom_Dom_float = global_data.Virtual_dom__Dom_float,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Inline_test_config = global_data.Inline_test_config,
    Core_Unit = global_data.Core__Unit;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Attr);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], cst_src_attr_ml);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   Css_gen[94][1][1] = Virtual_dom_Dom_float[6];
   var
    _a_ = [0, cst$8],
    _b_ = [0, "rtid"],
    _c_ = [0, cst$8],
    _d_ = [0, "ltid"],
    cst_BUG_Type_ids_for_event_han =
      "BUG!  Type-ids for event handlers differ";
   function combine(param, right){
    var
     rhandler = right[2],
     x_002 = right[1],
     lhandler = param[2],
     x_001 = param[1];
    if(caml_call2(Core_Type_equal[8][9], x_001, x_002))
     return [0,
             x_001,
             function(value){
              var _bq_ = caml_call1(lhandler, value);
              return caml_call2
                      (Virtual_dom_Effect[20],
                       _bq_,
                       function(param){return caml_call1(rhandler, value);});
             }];
    var
     _bn_ =
       [0,
        [1,
         [0,
          _b_,
          [0,
           caml_call2
            (Core_Type_equal[8][1], function(param){return _a_;}, x_002),
           0]]],
        0],
     _bo_ =
       [0,
        [1,
         [0,
          _d_,
          [0,
           caml_call2
            (Core_Type_equal[8][1], function(param){return _c_;}, x_001),
           0]]],
        _bn_],
     _bp_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_BUG_Type_ids_for_event_han),
         _bo_]];
    caml_call2(Core[249], 0, _bp_);
    return right;
   }
   function create(name, value){
    return [1, 0, name, caml_jsstring_of_string(value)];
   }
   function create_float(name, value){
    return [1, 0, name, caml_call1(Virtual_dom_Dom_float[1], value)];
   }
   function property(name, value){return [0, 0, name, value];}
   function string_property(name, value){
    return [0, 0, name, caml_jsstring_of_string(value)];
   }
   function bool_property(name, value){return [0, 0, name, ! ! value];}
   function suppress_merge_warnings(t){
    switch(t[0]){
      case 0:
       return [0, 1, t[2], t[3]];
      case 1:
       return [1, 1, t[2], t[3]];
      default: return t;
    }
   }
   function create_hook(name, hook){return [3, name, hook];}
   function many(attrs){return [6, attrs];}
   function many_without_merge(attrs){return [8, attrs];}
   function combine$0(left, right){return [6, [0, left, [0, right, 0]]];}
   var
    warning_count = [0, 0],
    current = [0, [0, 100]],
    _e_ = [0, "quota"],
    cst_WARNING_reached_warning_me =
      "WARNING: reached warning message quota; no more messages will be printed";
   function warn_s(s){
    warning_count[1]++;
    var match = current[1];
    if(typeof match === "number"){
     if(match) return caml_call2(Core[249], 0, s);
     return;
    }
    var quota = match[1], warning_count$0 = warning_count[1];
    if(caml_call2(Core[89], warning_count$0, quota)){
     caml_call2(Core[249], 0, s);
     if(caml_call2(Core[90], warning_count$0, quota)){
      var
       _bl_ = [0, [1, [0, _e_, [0, caml_call1(Core[356], quota), 0]]], 0],
       _bm_ =
         [1,
          [0,
           caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_reached_warning_me),
           _bl_]];
      return caml_call2(Core[249], 0, _bm_);
     }
    }
    return;
   }
   function reset_warning_count(param){warning_count[1] = 0; return 0;}
   var For_testing = [0, reset_warning_count];
   function combining_map_add(map, key, value, combine){
    return caml_call3
            (Core_Map[37],
             map,
             key,
             function(param){
              if(! param) return value;
              var existing_value = param[1];
              return caml_call3(combine, key, existing_value, value);
             });
   }
   var
    _f_ = caml_call1(Core_Map[4], [0, Core_String[139]]),
    _g_ = caml_call1(Core_Map[4], [0, Core_String[139]]),
    _h_ = caml_call1(Core_Set[6], [0, Core_String[139]]),
    empty_merge = [0, Css_gen[20], _h_, _g_, _f_],
    cst_foo_bar = "foo-bar";
   function style(css){return [4, css];}
   function valid_class_name(s){
    var
     _bk_ = caml_call1(Core_String[5], s),
     invalid = _bk_ || caml_call2(Core_String[10], s, Core_Char[19]);
    return 1 - invalid;
   }
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     "valid",
     0,
     cst_src_attr_ml,
     382,
     0,
     45,
     function(param){return valid_class_name(cst_foo_bar);});
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     "invalid-empty",
     0,
     cst_src_attr_ml,
     383,
     0,
     52,
     function(param){return 1 - valid_class_name(cst$0);});
   var cst_foo_bar$0 = "foo bar";
   caml_call8
    (Ppx_inline_test_lib_Runtime[4],
     Inline_test_config,
     "invalid-space",
     0,
     cst_src_attr_ml,
     384,
     0,
     59,
     function(param){return 1 - valid_class_name(cst_foo_bar$0);});
   var
    _r_ = [0, "classname"],
    cst_invalid_classname = "invalid classname",
    _s_ = [0, "classnames"],
    cst_invalid_classnames = "invalid classnames",
    cst_id = "id",
    cst_name = cst_name$0,
    cst_href = "href",
    cst_target = cst_target$0;
   function class$0(classname){
    if(1 - valid_class_name(classname)){
     var
      _bi_ = [0, [1, [0, _r_, [0, caml_call1(Core[471], classname), 0]]], 0],
      _bj_ =
        [1,
         [0, caml_call1(Sexplib0_Sexp_conv[7], cst_invalid_classname), _bi_]];
     caml_call1(Core[253], _bj_);
    }
    return [5, caml_call2(Core_Set[7], [0, Core_String[139]], classname)];
   }
   function classes(classes){return [5, classes];}
   function classes$0(classnames){
    if(1 - caml_call2(Core_List[14], classnames, valid_class_name)){
     var
      _bg_ =
        [0,
         [1, [0, _s_, [0, caml_call2(Core[421], Core[471], classnames), 0]]],
         0],
      _bh_ =
        [1,
         [0, caml_call1(Sexplib0_Sexp_conv[7], cst_invalid_classnames), _bg_]];
     caml_call1(Core[253], _bh_);
    }
    var classes = caml_call2(Core_Set[33], [0, Core_String[139]], classnames);
    return [5, classes];
   }
   function id(s){return create(cst_id, s);}
   function name(s){return create(cst_name, s);}
   function href(r){return create(cst_href, r);}
   function target(s){return create(cst_target, s);}
   var
    checked = create("checked", cst$1),
    selected = create("selected", cst$2),
    hidden = create("hidden", cst$3),
    readonly = create("readonly", cst$4),
    disabled = create("disabled", cst$5),
    cst_placeholder = "placeholder",
    cst_autofocus = "autofocus",
    cst_for = "for",
    cst_type = "type",
    cst_value$0 = cst_value$2,
    cst_value$1 = cst_value$2,
    cst_tabindex = "tabindex",
    cst_title = "title",
    cst_src = "src",
    cst_min = "min",
    cst_max = "max",
    cst_colspan = "colspan",
    cst_rowspan = "rowspan",
    cst_draggable = "draggable",
    _t_ = [1, 0];
   function placeholder(x){return create(cst_placeholder, x);}
   function autofocus(param){
    return param ? create(cst_autofocus, cst$6) : empty;
   }
   function for$0(x){return create(cst_for, x);}
   function type(x){return create(cst_type, x);}
   function value(x){return create(cst_value$0, x);}
   function value_prop(x){return string_property(cst_value$1, x);}
   function tabindex(x){
    return create(cst_tabindex, caml_call1(Core_Int[82], x));
   }
   function title(x){return create(cst_title, x);}
   function src(x){return create(cst_src, x);}
   function min(x){return create_float(cst_min, x);}
   function max(x){return create_float(cst_max, x);}
   function colspan(x){
    return create(cst_colspan, caml_call1(Core_Int[82], x));
   }
   function rowspan(x){
    return create(cst_rowspan, caml_call1(Core_Int[82], x));
   }
   function draggable(b){
    return create(cst_draggable, caml_call1(Core_Bool[19], b));
   }
   function create$0(name){
    return caml_call2
            (Core_Type_equal[8][3], name, function(param){return _t_;});
   }
   var
    event = create$0("event"),
    focus = create$0("focusEvent"),
    mouse = create$0("mouseEvent"),
    keyboard = create$0("keyboardEvent"),
    submit = create$0("submitEvent"),
    mousewheel = create$0("mousewheelEvent"),
    clipboard = create$0("clipboardEvent"),
    drag = create$0("dragEvent"),
    pointer = create$0("pointerEvent"),
    animation = create$0("animationEvent"),
    _i_ = [0, cst_second],
    _j_ = [0, cst_first],
    cst_WARNING_not_combining_styl = "WARNING: not combining styles",
    _k_ = [0, cst_second],
    _l_ = [0, cst_first],
    cst_WARNING_not_combining_clas = "WARNING: not combining classes",
    _m_ = [0, cst_name$0],
    cst_WARNING_not_combining_hand = "WARNING: not combining handlers",
    _n_ = [0, cst_name$0],
    cst_WARNING_not_combining_hook = "WARNING: not combining hooks",
    _o_ = [0, cst_name$0],
    cst_WARNING_not_combining_prop = "WARNING: not combining properties",
    cst_value = cst_value$2,
    _p_ = [0, cst_name$0],
    cst_WARNING_not_combining_attr = "WARNING: not combining attributes",
    cst_on = cst_on$1,
    cst_style = cst_style$1,
    _q_ = [0, " "],
    cst_class = cst_class$1,
    cst_focus = cst_focus$0,
    cst_blur = "blur",
    cst_click = "click",
    cst_contextmenu = "contextmenu",
    cst_dblclick = "dblclick",
    cst_drag = "drag",
    cst_dragstart = "dragstart",
    cst_dragend = "dragend",
    cst_dragenter = "dragenter",
    cst_dragleave = "dragleave",
    cst_dragover = "dragover",
    cst_drop = "drop",
    cst_mousemove = "mousemove",
    cst_mouseup = "mouseup",
    cst_mousedown = "mousedown",
    cst_mouseenter = "mouseenter",
    cst_mouseleave = "mouseleave",
    cst_mouseover = "mouseover",
    cst_mouseout = "mouseout",
    cst_keyup = "keyup",
    cst_keypress = "keypress",
    cst_keydown = "keydown",
    cst_scroll = "scroll",
    cst_submit = "submit",
    cst_pointerdown = "pointerdown",
    cst_pointerup = "pointerup",
    cst_mousewheel = "mousewheel",
    cst_copy = "copy",
    cst_cut = "cut",
    cst_paste = "paste",
    cst_reset = "reset",
    cst_animationend = "animationend",
    cst_change = "change",
    cst_input = cst_input$1,
    cst_input$0 = cst_input$1;
   function on(type_id, name, handler){
    return [2, name, [0, type_id, handler]];
   }
   function on_focus(_bf_){return on(focus, cst_focus, _bf_);}
   function on_blur(_be_){return on(focus, cst_blur, _be_);}
   function on_click(_bd_){return on(mouse, cst_click, _bd_);}
   function on_contextmenu(_bc_){return on(mouse, cst_contextmenu, _bc_);}
   function on_double_click(_bb_){return on(mouse, cst_dblclick, _bb_);}
   function on_drag(_ba_){return on(drag, cst_drag, _ba_);}
   function on_dragstart(_a$_){return on(drag, cst_dragstart, _a$_);}
   function on_dragend(_a__){return on(drag, cst_dragend, _a__);}
   function on_dragenter(_a9_){return on(drag, cst_dragenter, _a9_);}
   function on_dragleave(_a8_){return on(drag, cst_dragleave, _a8_);}
   function on_dragover(_a7_){return on(drag, cst_dragover, _a7_);}
   function on_drop(_a6_){return on(drag, cst_drop, _a6_);}
   function on_mousemove(_a5_){return on(mouse, cst_mousemove, _a5_);}
   function on_mouseup(_a4_){return on(mouse, cst_mouseup, _a4_);}
   function on_mousedown(_a3_){return on(mouse, cst_mousedown, _a3_);}
   function on_mouseenter(_a2_){return on(mouse, cst_mouseenter, _a2_);}
   function on_mouseleave(_a1_){return on(mouse, cst_mouseleave, _a1_);}
   function on_mouseover(_a0_){return on(mouse, cst_mouseover, _a0_);}
   function on_mouseout(_aZ_){return on(mouse, cst_mouseout, _aZ_);}
   function on_keyup(_aY_){return on(keyboard, cst_keyup, _aY_);}
   function on_keypress(_aX_){return on(keyboard, cst_keypress, _aX_);}
   function on_keydown(_aW_){return on(keyboard, cst_keydown, _aW_);}
   function on_scroll(_aV_){return on(event, cst_scroll, _aV_);}
   function on_submit(_aU_){return on(submit, cst_submit, _aU_);}
   function on_pointerdown(_aT_){return on(pointer, cst_pointerdown, _aT_);}
   function on_pointerup(_aS_){return on(pointer, cst_pointerup, _aS_);}
   function on_mousewheel(_aR_){return on(mousewheel, cst_mousewheel, _aR_);}
   function on_copy(_aQ_){return on(clipboard, cst_copy, _aQ_);}
   function on_cut(_aP_){return on(clipboard, cst_cut, _aP_);}
   function on_paste(_aO_){return on(clipboard, cst_paste, _aO_);}
   function on_reset(_aN_){return on(event, cst_reset, _aN_);}
   function on_animationend(_aM_){
    return on(animation, cst_animationend, _aM_);
   }
   function const_ignore(param){return Virtual_dom_Effect[1];}
   function run_coercion(coercion, target, prev){
    if(prev) return prev;
    var _aL_ = caml_call1(coercion, target);
    return caml_call1(Js_of_ocaml_Js[5][10], _aL_);
   }
   function on_input_event(type_id, event, handler){
    return on
            (type_id,
             event,
             function(ev){
              return caml_call3
                      (Js_of_ocaml_Js[5][7],
                       ev.target,
                       const_ignore,
                       function(target){
                        var
                         _aK_ = Virtual_dom_Effect[1],
                         _aH_ =
                           run_coercion(Js_of_ocaml_Dom_html[118][33], target, 0),
                         _aI_ =
                           run_coercion(Js_of_ocaml_Dom_html[118][50], target, _aH_),
                         _aJ_ =
                           run_coercion(Js_of_ocaml_Dom_html[118][55], target, _aI_);
                        return caml_call3
                                (Core_Option[36],
                                 _aJ_,
                                 _aK_,
                                 function(target){
                                  var text = runtime.caml_string_of_jsstring(target.value);
                                  return caml_call2(handler, ev, text);
                                 });
                       });
             });
   }
   function on_change(_aG_){return on_input_event(event, cst_change, _aG_);}
   function on_input(_aF_){return on_input_event(event, cst_input, _aF_);}
   function to_raw(attr){
    switch(attr[0]){
      case 6:
      case 8:
       if(! attr[1]) return caml_call1(Virtual_dom_Raw[2][3], 0); break;
    }
    var
     attrs = [0, attr, 0],
     attrs_obj = caml_call1(Virtual_dom_Raw[2][3], 0);
    function take_second_styles(first, second){
     if(1 - caml_call1(Css_gen[21], first)){
      var
       _aD_ = [0, [1, [0, _i_, [0, caml_call1(Css_gen[9], second), 0]]], 0],
       _aE_ = [0, [1, [0, _j_, [0, caml_call1(Css_gen[9], first), 0]]], _aD_];
      warn_s
       ([1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_styl),
          _aE_]]);
     }
     return second;
    }
    function take_second_classes(first, second){
     if(1 - caml_call1(Core_Set[9], first)){
      var
       _aB_ =
         [0,
          [1, [0, _k_, [0, caml_call1(Core_String[141][75], second), 0]]],
          0],
       _aC_ =
         [0,
          [1, [0, _l_, [0, caml_call1(Core_String[141][75], first), 0]]],
          _aB_];
      warn_s
       ([1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_clas),
          _aC_]]);
     }
     return second;
    }
    function take_second_handler(name, first, second){
     var _aA_ = [0, [1, [0, _m_, [0, caml_call1(Core[471], name), 0]]], 0];
     warn_s
      ([1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_hand),
         _aA_]]);
     return second;
    }
    function take_second_hook(name, first, second){
     var _az_ = [0, [1, [0, _n_, [0, caml_call1(Core[471], name), 0]]], 0];
     warn_s
      ([1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_hook),
         _az_]]);
     return second;
    }
    function merge
    (combine_hook, combine_handler, combine_styles, combine_classes, acc){
     var ___ = Core_List[10];
     function _$_(acc, attr){
      switch(attr[0]){
        case 0:
         var
          value = attr[3],
          name = attr[2],
          suppress_merge_warnings = attr[1],
          _ab_ = caml_call2(Virtual_dom_Raw[2][4], attrs_obj, name),
          _ac_ = _ab_ ? 1 - suppress_merge_warnings : _ab_;
         if(_ac_){
          var
           _ad_ = [0, [1, [0, _o_, [0, caml_call1(Core[471], name), 0]]], 0];
          warn_s
           ([1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_prop),
              _ad_]]);
         }
         if(name !== cst_value$2)
          caml_call3(Virtual_dom_Raw[2][6], attrs_obj, name, value);
         else{
          var t1 = Js_of_ocaml_Js[52][1], value$0 = t1.SoftSetHook(value);
          caml_call3(Virtual_dom_Raw[2][6], attrs_obj, cst_value, value$0);
         }
         return acc;
        case 1:
         var
          value$1 = attr[3],
          name$0 = attr[2],
          suppress_merge_warnings$0 = attr[1],
          _ae_ = caml_call2(Virtual_dom_Raw[2][5], attrs_obj, name$0),
          _af_ = _ae_ ? 1 - suppress_merge_warnings$0 : _ae_;
         if(_af_){
          var
           _ag_ = [0, [1, [0, _p_, [0, caml_call1(Core[471], name$0), 0]]], 0];
          warn_s
           ([1,
             [0,
              caml_call1
               (Sexplib0_Sexp_conv[7], cst_WARNING_not_combining_attr),
              _ag_]]);
         }
         caml_call3(Virtual_dom_Raw[2][7], attrs_obj, name$0, value$1);
         return acc;
        case 2:
         var
          handler = attr[2],
          name$1 = attr[1],
          _ah_ = acc[4],
          _ai_ = combining_map_add(acc[3], name$1, handler, combine_handler);
         return [0, acc[1], acc[2], _ai_, _ah_];
        case 3:
         var
          hook = attr[2],
          name$2 = attr[1],
          _aj_ = combining_map_add(acc[4], name$2, hook, combine_hook);
         return [0, acc[1], acc[2], acc[3], _aj_];
        case 4:
         var
          new_styles = attr[1],
          _ak_ = acc[4],
          _al_ = acc[3],
          _am_ = acc[2];
         return [0,
                 caml_call2(combine_styles, acc[1], new_styles),
                 _am_,
                 _al_,
                 _ak_];
        case 5:
         var
          new_classes = attr[1],
          _an_ = acc[4],
          _ao_ = acc[3],
          _ap_ = caml_call2(combine_classes, acc[2], new_classes);
         return [0, acc[1], _ap_, _ao_, _an_];
        case 6:
         var
          attrs = attr[1],
          sub_merge =
            merge
              (function(param){return Virtual_dom_Hooks[1];},
               function(param){return combine;},
               Css_gen[27],
               Core_Set[13],
               empty_merge)
             (attrs),
          _aq_ = caml_call3(Core_Map[78], acc[4], sub_merge[4], combine_hook),
          _ar_ =
            caml_call3(Core_Map[78], acc[3], sub_merge[3], combine_handler),
          _as_ = caml_call2(combine_classes, acc[2], sub_merge[2]);
         return [0,
                 caml_call2(combine_styles, acc[1], sub_merge[1]),
                 _as_,
                 _ar_,
                 _aq_];
        case 7:
         var
          map_classes = attr[3],
          map_styles = attr[2],
          attrs$0 = attr[1],
          sub_merge$0 =
            merge
              (take_second_hook,
               take_second_handler,
               Css_gen[27],
               Core_Set[13],
               empty_merge)
             (attrs$0),
          _at_ =
            caml_call3(Core_Map[78], acc[4], sub_merge$0[4], combine_hook),
          _au_ =
            caml_call3(Core_Map[78], acc[3], sub_merge$0[3], combine_handler),
          _av_ =
            caml_call1
             (map_classes,
              caml_call2(combine_classes, acc[2], sub_merge$0[2]));
         return [0,
                 caml_call1
                  (map_styles,
                   caml_call2(combine_styles, acc[1], sub_merge$0[1])),
                 _av_,
                 _au_,
                 _at_];
        default:
         var
          attrs$1 = attr[1],
          sub_merge$1 =
            merge
              (take_second_hook,
               take_second_handler,
               take_second_styles,
               take_second_classes,
               empty_merge)
             (attrs$1),
          _aw_ =
            caml_call3(Core_Map[78], acc[4], sub_merge$1[4], combine_hook),
          _ax_ =
            caml_call3(Core_Map[78], acc[3], sub_merge$1[3], combine_handler),
          _ay_ = caml_call2(combine_classes, acc[2], sub_merge$1[2]);
         return [0,
                 caml_call2(combine_styles, acc[1], sub_merge$1[1]),
                 _ay_,
                 _ax_,
                 _aw_];
      }
     }
     return function(_aa_){return caml_call3(___, _aa_, acc, _$_);};
    }
    var
     merge$0 =
       merge
         (take_second_hook,
          take_second_handler,
          take_second_styles,
          take_second_classes,
          empty_merge)
        (attrs);
    caml_call2
     (Core_Map[45],
      merge$0[4],
      function(name, hook){
       var _Z_ = caml_call1(Virtual_dom_Hooks[2], hook);
       return caml_call3(Virtual_dom_Raw[2][6], attrs_obj, name, _Z_);
      });
    caml_call2
     (Core_Map[45],
      merge$0[3],
      function(name, param){
       var handler = param[2];
       function f(e){
        var _Y_ = caml_call1(handler, e);
        caml_call2(Virtual_dom_Effect[22][1], e, _Y_);
        return Js_of_ocaml_Js[7];
       }
       var
        _W_ = caml_call1(Js_of_ocaml_Dom[10], f),
        _X_ = caml_call2(Core[18], cst_on, name);
       return caml_call3(Virtual_dom_Raw[2][6], attrs_obj, _X_, _W_);
      });
    if(1 - caml_call1(Css_gen[21], merge$0[1])){
     var
      props = caml_call1(Css_gen[30], merge$0[1]),
      obj = caml_call1(Ojs[11], 0);
     caml_call2
      (Core_List[9],
       props,
       function(param){
        var v = param[2], k = param[1];
        return obj[k] = caml_js_from_string(v);
       });
     caml_call3(Virtual_dom_Raw[2][6], attrs_obj, cst_style, obj);
    }
    if(! caml_call1(Core_Set[9], merge$0[2])){
     var
      _U_ = caml_call1(Core_Set[38], merge$0[2]),
      _V_ = caml_js_from_string(caml_call2(Core_String[32], _q_, _U_));
     caml_call3(Virtual_dom_Raw[2][7], attrs_obj, cst_class, _V_);
    }
    return attrs_obj;
   }
   function on_file_input(handler){
    return on
            (event,
             cst_input$0,
             function(ev){
              return caml_call3
                      (Js_of_ocaml_Js[5][7],
                       ev.target,
                       const_ignore,
                       function(target){
                        var _T_ = caml_call1(Js_of_ocaml_Dom_html[118][33], target);
                        return caml_call3
                                (Js_of_ocaml_Js[5][7],
                                 _T_,
                                 const_ignore,
                                 function(target){
                                  return caml_call3
                                          (Js_of_ocaml_Js[6][7],
                                           target.files,
                                           const_ignore,
                                           function(files){return caml_call2(handler, ev, files);});
                                 });
                       });
             });
   }
   var sexp_of_t = Core_Unit[15];
   function combine$1(param, _S_){return 0;}
   function init(param, _R_){return 0;}
   function on_mount(param, _Q_, element){return element.focus();}
   function update(param, _P_, _O_, _N_){return 0;}
   function destroy(param, _M_, _L_){return 0;}
   var
    Hook =
      caml_call1
       (Virtual_dom_Hooks[3],
        [0, [0], [0, sexp_of_t, combine$1], init, on_mount, update, destroy]),
    cst_on$0 = cst_on$1,
    cst_style$0 = cst_style$1,
    cst_class$0 = cst_class$1;
   function attr(param){
    var hook = caml_call1(Hook[1], 0);
    return [3, name$0, hook];
   }
   function map_style(t, f){
    return [0, [7, t, f, function(_K_){return _K_;}], 0];
   }
   function add_class(t, c){
    return [0,
            [7,
             t,
             function(_J_){return _J_;},
             function(cs){return caml_call2(Core_Set[11], cs, c);}],
            0];
   }
   function add_style(t, s){
    return map_style(t, function(ss){return caml_call2(Css_gen[27], ss, s);});
   }
   function merge_classes_and_styles(t){
    return [0,
            [7, t, function(_I_){return _I_;}, function(_H_){return _H_;}],
            0];
   }
   function filter_by_kind(t, f){
    switch(t[0]){
      case 0:
       return caml_call1(f, 99222645) ? t : empty;
      case 1:
       return caml_call1(f, 482562044) ? t : empty;
      case 2:
       return caml_call1(f, 321312682) ? t : empty;
      case 3:
       return caml_call1(f, 803993603) ? t : empty;
      case 4:
       return caml_call1(f, 390796561) ? t : empty;
      case 5:
       return caml_call1(f, -611981288) ? t : empty;
      case 6:
       var attrs = t[1];
       return [6,
               caml_call2
                (Core_List[72],
                 attrs,
                 function(_G_){return filter_by_kind(_G_, f);})];
      case 7:
       var b = t[3], a = t[2], attrs$0 = t[1];
       return [7,
               caml_call2
                (Core_List[72],
                 attrs$0,
                 function(_F_){return filter_by_kind(_F_, f);}),
               a,
               b];
      default:
       var attrs$1 = t[1];
       return [8,
               caml_call2
                (Core_List[72],
                 attrs$1,
                 function(_E_){return filter_by_kind(_E_, f);})];
    }
   }
   function contains_name(looking_for, param){
    switch(param[0]){
      case 2:
       var name$0 = param[1], _C_ = caml_call2(Core[18], cst_on$0, name$0);
       return caml_call2(Core_String[126], _C_, looking_for);
      case 3:
       var name = param[1]; break;
      case 4:
       return caml_call2(Core_String[126], looking_for, cst_style$0);
      case 5:
       return caml_call2(Core_String[126], looking_for, cst_class$0);
      case 0:
      case 1:
       var name = param[2]; break;
      default:
       var attrs = param[1];
       return caml_call2
               (Core_List[13],
                attrs,
                function(_D_){return contains_name(looking_for, _D_);});
    }
    return caml_call2(Core_String[126], looking_for, name);
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Attr);
   var
    Virtual_dom_Attr =
      [0,
       create,
       create_float,
       string_property,
       bool_property,
       property,
       suppress_merge_warnings,
       create_hook,
       many,
       many_without_merge,
       empty,
       combine$0,
       combine$0,
       autofocus,
       checked,
       class$0,
       classes$0,
       classes,
       disabled,
       for$0,
       href,
       target,
       id,
       name,
       placeholder,
       selected,
       hidden,
       readonly,
       style,
       min,
       max,
       colspan,
       rowspan,
       draggable,
       tabindex,
       type,
       value,
       value_prop,
       title,
       src,
       on_focus,
       on_blur,
       [0, current, For_testing],
       to_raw,
       on_input,
       on_change,
       on_file_input,
       on_click,
       on_contextmenu,
       on_double_click,
       on_drag,
       on_dragstart,
       on_dragend,
       on_dragenter,
       on_dragleave,
       on_dragover,
       on_drop,
       on_mousemove,
       on_mouseup,
       on_mousedown,
       on_mouseenter,
       on_mouseleave,
       on_mouseover,
       on_mouseout,
       on_keyup,
       on_keypress,
       on_keydown,
       on_scroll,
       on_submit,
       on_pointerdown,
       on_pointerup,
       on_mousewheel,
       on_copy,
       on_cut,
       on_paste,
       on_reset,
       on_animationend,
       [0, merge_classes_and_styles, map_style, add_style, add_class],
       [0, attr],
       function(_u_){
        var has_been_used = [0, 0], sexp_of_t = Sexplib0_Sexp_conv[23];
        function combine(left, right){
         return [0, Ui_effect[2], [0, left, [0, right, 0]]];
        }
        var Input = [0, sexp_of_t, combine];
        function init(param, _B_){return 0;}
        function on_mount(event, param, element){
         var _A_ = 1 - has_been_used[1];
         return _A_
                 ? (has_been_used
                    [1]
                   = 1,
                   element.focus(),
                   caml_call1(Virtual_dom_Effect[22][2], event))
                 : _A_;
        }
        function update(param, _z_, _y_, _x_){return 0;}
        function destroy(param, _w_, _v_){return 0;}
        var
         Hook =
           caml_call1
            (Virtual_dom_Hooks[3],
             [0, [0], Input, init, on_mount, update, destroy]);
        function attr(param, after){
         var hook = caml_call1(Hook[1], after);
         return [3, name$1, hook];
        }
        return [0, attr];
       },
       [0, contains_name, filter_by_kind]];
   runtime.caml_register_global(163, Virtual_dom_Attr, cst_Virtual_dom_Attr);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Global_listeners
//# unitInfo: Requires: Expect_test_collector, Js_of_ocaml__Dom, Js_of_ocaml__Dom_html, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Ui_effect, Virtual_dom__Attr, Virtual_dom__Effect, Virtual_dom__Hooks
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Global_listene = "Virtual_dom__Global_listeners",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Virtual_dom_Attr = global_data.Virtual_dom__Attr,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Virtual_dom_Effect = global_data.Virtual_dom__Effect,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Ui_effect = global_data.Ui_effect,
    Virtual_dom_Hooks = global_data.Virtual_dom__Hooks,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Global_listene);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/global_listeners.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   function Make(X){
    function sexp_of_t(param){
     return caml_call1(Sexplib0_Sexp_conv[24], function(_f_){return 0;});
    }
    function combine(f, g, event){
     var
      _d_ = [0, caml_call1(g, event), 0],
      _e_ = [0, caml_call1(f, event), _d_];
     return [0, Ui_effect[2], _e_];
    }
    var Input = [0, sexp_of_t, combine];
    function init(f, element){
     var
      handler =
        caml_call1
         (Js_of_ocaml_Dom[10],
          function(ev){
           var _c_ = caml_call1(f, ev);
           caml_call1(Virtual_dom_Effect[22][2], _c_);
           return Js_of_ocaml_Js[7];
          });
     return [0,
             caml_call4
              (Js_of_ocaml_Dom_html[17],
               Js_of_ocaml_Dom_html[8],
               X[1],
               handler,
               Js_of_ocaml_Js[7])];
    }
    function destroy(input, state, element){
     return caml_call1(Js_of_ocaml_Dom_html[18], state[1]);
    }
    function update(old_input, f, state, element){
     destroy(old_input, state, element);
     var new_state = init(f, element);
     state[1] = new_state[1];
     return 0;
    }
    function on_mount(input, state, element){return 0;}
    var
     include =
       caml_call1
        (Virtual_dom_Hooks[3],
         [0, [0], Input, init, on_mount, update, destroy]),
     create = include[1],
     For_testing = include[2];
    return [0, create, For_testing];
   }
   var
    event_kind = Js_of_ocaml_Dom_html[15][9],
    Mouse_up = Make([0, event_kind]),
    event_kind$0 = Js_of_ocaml_Dom_html[15][11],
    Mouse_move = Make([0, event_kind$0]),
    cst_global_mouseup_listener = "global-mouseup-listener",
    cst_global_mousemove_listener = "global-mousemove-listener";
   function mouseup(f){
    var _b_ = caml_call1(Mouse_up[1], f);
    return caml_call2(Virtual_dom_Attr[7], cst_global_mouseup_listener, _b_);
   }
   function mousemove(f){
    var _a_ = caml_call1(Mouse_move[1], f);
    return caml_call2(Virtual_dom_Attr[7], cst_global_mousemove_listener, _a_);
   }
   var
    mouse_up_type_id = Mouse_up[2][1],
    mouse_move_type_id = Mouse_move[2][1],
    For_testing = [0, mouse_up_type_id, mouse_move_type_id];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Global_listene);
   var Virtual_dom_Global_listeners = [0, mouseup, mousemove, For_testing];
   runtime.caml_register_global
    (22, Virtual_dom_Global_listeners, cst_Virtual_dom_Global_listene);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Node
//# unitInfo: Requires: Base, Base__List, Base__Printf, Base__Staged, Base__Type_equal, CamlinternalLazy, Expect_test_collector, Js_of_ocaml__Js, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Virtual_dom__Attr, Virtual_dom__Raw
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Virtual_dom_Node = "Virtual_dom__Node",
    cst_input$0 = "input",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    res1_009 = [0, "<opaque>"],
    cst = cst$1,
    cst_pre = "pre",
    Virtual_dom_Raw = global_data.Virtual_dom__Raw,
    Base = global_data.Base,
    Base_List = global_data.Base__List,
    Virtual_dom_Attr = global_data.Virtual_dom__Attr,
    Base_Type_equal = global_data.Base__Type_equal,
    Base_Staged = global_data.Base__Staged,
    Base_Printf = global_data.Base__Printf,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Node);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/node.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   var include = Virtual_dom_Raw[6], create = include[2], Aliases = [0];
   function tag(t){return t[1];}
   function attrs(t){return t[3];}
   function key(t){return t[2];}
   function with_key(t, key){
    return [0, t[1], [0, key], t[3], t[4], t[5], t[6]];
   }
   function map_attrs(t, f){
    var
     attrs = caml_call1(f, t[3]),
     raw_attrs =
       [246, function(_bw_){return caml_call1(Virtual_dom_Attr[43], attrs);}];
    return [0, t[1], t[2], attrs, raw_attrs, t[5], t[6]];
   }
   function add_class(t, c){
    return map_attrs
            (t,
             function(a){
              var _bv_ = caml_call1(Virtual_dom_Attr[15], c);
              return caml_call2(Virtual_dom_Attr[11], a, _bv_);
             });
   }
   function add_classes(t, c){
    return map_attrs
            (t,
             function(a){
              var _bu_ = caml_call1(Virtual_dom_Attr[16], c);
              return caml_call2(Virtual_dom_Attr[11], a, _bu_);
             });
   }
   function add_style(t, s){
    return map_attrs
            (t,
             function(a){
              var _bt_ = caml_call1(Virtual_dom_Attr[28], s);
              return caml_call2(Virtual_dom_Attr[11], a, _bt_);
             });
   }
   function t_to_js(param){
    if(typeof param === "number")
     return caml_call1(Virtual_dom_Raw[4][4], cst$0);
    switch(param[0]){
      case 0:
       var s = param[1]; return caml_call1(Virtual_dom_Raw[4][4], s);
      case 1:
       var
        _bq_ = param[1],
        _br_ = _bq_[4],
        key = _bq_[2],
        tag = _bq_[1],
        _bs_ = runtime.caml_obj_tag(_br_),
        raw_attrs =
          250 === _bs_
           ? _br_[1]
           : 246 === _bs_ ? caml_call1(CamlinternalLazy[2], _br_) : _br_,
        children = _bq_[5];
       return 4153924 <= _bq_[6]
               ? caml_call4
                 (Virtual_dom_Raw[4][5], tag, raw_attrs, children, key)
               : caml_call4
                 (Virtual_dom_Raw[4][3], tag, raw_attrs, children, key);
      default: var w = param[1]; return w;
    }
   }
   function element(kind, tag, key, attrs, children){
    var t0 = Js_of_ocaml_Js[18], children_raw = new t0;
    caml_call2
     (Base_List[9],
      children,
      function(other){
       if(typeof other === "number") return 0;
       var t1 = t_to_js(other);
       children_raw.push(t1);
       return 0;
      });
    var
     raw_attrs =
       [246, function(_bp_){return caml_call1(Virtual_dom_Attr[43], attrs);}];
    return [0, tag, key, attrs, raw_attrs, children_raw, kind];
   }
   function element_expert(kind, tag, key, attrs, children){
    var
     raw_attrs =
       [246, function(_bo_){return caml_call1(Virtual_dom_Attr[43], attrs);}];
    return [0, tag, key, attrs, raw_attrs, children, kind];
   }
   function text(s){return [0, s];}
   function widget(info, destroy, update, id, init, param){
    return [2, caml_call6(create, info, destroy, update, id, init, 0)];
   }
   function create$0(tag, key, opt, children){
    if(opt)
     var sth = opt[1], attr = sth;
    else
     var attr = Virtual_dom_Attr[10];
    return [1, element(-847254184, tag, key, attr, children)];
   }
   function create_childless(tag, key, attr, param){return create$0(tag, key, attr, 0);
   }
   function create_svg(tag, key, opt, children){
    if(opt)
     var sth = opt[1], attr = sth;
    else
     var attr = Virtual_dom_Attr[10];
    return [1, element(4153924, tag, key, attr, children)];
   }
   var
    _a_ = [0, "state"],
    _b_ = [0, cst_input$0],
    _c_ = [0, "inner-html"],
    cst_inner_html_node = "inner-html-node",
    cst_Vdom_Node_inner_html_was_g = "Vdom.Node.inner_html was given a 'none'",
    cst_Vdom_Node_inner_html_was_g$0 =
      "Vdom.Node.inner_html was given a 'text'",
    cst_Vdom_Node_inner_html_was_g$1 =
      "Vdom.Node.inner_html was given a 'widget'",
    cst_a = "a",
    cst_body = "body",
    cst_button = "button",
    cst_code = "code",
    cst_div = "div",
    cst_main = "main",
    cst_fieldset = "fieldset",
    cst_footer = "footer",
    cst_h1 = "h1",
    cst_h2 = "h2",
    cst_h3 = "h3",
    cst_h4 = "h4",
    cst_h5 = "h5",
    cst_h6 = "h6",
    cst_header = "header",
    cst_html = "html",
    cst_input = cst_input$0,
    cst_textarea = "textarea",
    cst_select = "select",
    cst_option = "option",
    cst_label = "label",
    cst_li = "li",
    cst_p = "p",
    cst_section = "section",
    cst_span = "span",
    cst_strong = "strong",
    cst_table = "table",
    cst_tbody = "tbody",
    cst_td = "td",
    cst_th = "th",
    cst_thead = "thead",
    cst_tr = "tr",
    cst_ul = "ul",
    cst_ol = "ol",
    cst_br = "br",
    cst_hr = "hr";
   function textf(format){return caml_call2(Base_Printf[4], text, format);}
   function widget_of_module(m){
    var
     id =
       caml_call2
        (Base_Type_equal[12][4],
         m[3],
         function(param){
          var
           arg0_006 = param[1],
           state_004 = arg0_006[2],
           input_002 = arg0_006[1],
           arg_005 = caml_call1(m[2][1], state_004),
           bnds_001 = [0, [1, [0, _a_, [0, arg_005, 0]]], 0],
           arg_003 = caml_call1(m[1][1], input_002),
           bnds_001$0 = [0, [1, [0, _b_, [0, arg_003, 0]]], bnds_001],
           res0_008 = [1, bnds_001$0];
          return [1, [0, res0_008, [0, res1_009, 0]]];
         }),
     _bm_ =
       caml_call1
        (Base_Staged[1],
         function(input){
          var
           info = [246, function(_bn_){return caml_call1(m[1][1], input);}];
          return caml_call6
                  (create,
                   [0, info],
                   [0,
                    function(param, element){
                     var state = param[2], prev_input = param[1];
                     return caml_call3(m[6], prev_input, state, element);
                    }],
                   [0,
                    function(param, element){
                     var
                      state = param[2],
                      prev_input = param[1],
                      match = caml_call4(m[5], prev_input, input, state, element),
                      element$0 = match[2],
                      state$0 = match[1];
                     return [0, [0, input, state$0], element$0];
                    }],
                   id,
                   function(param){
                    var
                     match = caml_call1(m[4], input),
                     element = match[2],
                     state = match[1];
                    return [0, [0, input, state], element];
                   },
                   0);
         }),
     f = caml_call1(Base_Staged[2], _bm_);
    return caml_call1
            (Base_Staged[1], function(i){return [2, caml_call1(f, i)];});
   }
   function to_dom(t){
    var _bl_ = t_to_js(t);
    return caml_call1(Virtual_dom_Raw[4][6], _bl_);
   }
   function inner_html(create, tag, attr, content){
    var element = caml_call3(create, tag, attr, 0);
    function build_sexp(extra, content){
     return [1, [0, _c_, [0, extra, [0, [0, content], 0]]]];
    }
    var
     id =
       caml_call2
        (Base_Type_equal[12][4],
         cst_inner_html_node,
         function(param){
          var match = param[1], content = match[2], element = match[1];
          return build_sexp(element, content);
         });
    if(typeof element === "number")
     var debug = caml_call1(Base[200], cst_Vdom_Node_inner_html_was_g);
    else
     switch(element[0]){
       case 0:
        var debug = caml_call1(Base[200], cst_Vdom_Node_inner_html_was_g$0);
        break;
       case 1:
        var element$0 = element[1], debug = [0, element$0[1]]; break;
       default:
        var debug = caml_call1(Base[200], cst_Vdom_Node_inner_html_was_g$1);
     }
    return widget
            ([0, [246, function(_bk_){return build_sexp(debug, content);}]],
             0,
             0,
             id,
             function(param){
              var
               element$0 = to_dom(element),
               t3 = runtime.caml_jsstring_of_string(content);
              element$0.innerHTML = t3;
              return [0, [0, debug, content], element$0];
             },
             0);
   }
   function _d_(tag, attr){
    var key = 0;
    return function(children){
     return [1, element(4153924, tag, key, attr, children)];};
   }
   function inner_html_svg(_bh_, _bi_, _bj_){
    return inner_html(_d_, _bh_, _bi_, _bj_);
   }
   function _e_(tag, attr){
    var _be_ = [0, attr], _bf_ = 0;
    return function(_bg_){return create$0(tag, _bf_, _be_, _bg_);};
   }
   function inner_html$0(_bb_, _bc_, _bd_){
    return inner_html(_e_, _bb_, _bc_, _bd_);
   }
   function a(_a__, _a$_, _ba_){return create$0(cst_a, _a__, _a$_, _ba_);}
   function body(_a7_, _a8_, _a9_){
    return create$0(cst_body, _a7_, _a8_, _a9_);
   }
   function button(_a4_, _a5_, _a6_){
    return create$0(cst_button, _a4_, _a5_, _a6_);
   }
   function code(_a1_, _a2_, _a3_){
    return create$0(cst_code, _a1_, _a2_, _a3_);
   }
   function div(_aY_, _aZ_, _a0_){return create$0(cst_div, _aY_, _aZ_, _a0_);}
   function main(_aV_, _aW_, _aX_){
    return create$0(cst_main, _aV_, _aW_, _aX_);
   }
   function fieldset(_aS_, _aT_, _aU_){
    return create$0(cst_fieldset, _aS_, _aT_, _aU_);
   }
   function footer(_aP_, _aQ_, _aR_){
    return create$0(cst_footer, _aP_, _aQ_, _aR_);
   }
   function h1(_aM_, _aN_, _aO_){return create$0(cst_h1, _aM_, _aN_, _aO_);}
   function h2(_aJ_, _aK_, _aL_){return create$0(cst_h2, _aJ_, _aK_, _aL_);}
   function h3(_aG_, _aH_, _aI_){return create$0(cst_h3, _aG_, _aH_, _aI_);}
   function h4(_aD_, _aE_, _aF_){return create$0(cst_h4, _aD_, _aE_, _aF_);}
   function h5(_aA_, _aB_, _aC_){return create$0(cst_h5, _aA_, _aB_, _aC_);}
   function h6(_ax_, _ay_, _az_){return create$0(cst_h6, _ax_, _ay_, _az_);}
   function header(_au_, _av_, _aw_){
    return create$0(cst_header, _au_, _av_, _aw_);
   }
   function html(_ar_, _as_, _at_){
    return create$0(cst_html, _ar_, _as_, _at_);
   }
   function input(_ao_, _ap_, _aq_){
    return create$0(cst_input, _ao_, _ap_, _aq_);
   }
   function textarea(_al_, _am_, _an_){
    return create$0(cst_textarea, _al_, _am_, _an_);
   }
   function select(_ai_, _aj_, _ak_){
    return create$0(cst_select, _ai_, _aj_, _ak_);
   }
   function option(_af_, _ag_, _ah_){
    return create$0(cst_option, _af_, _ag_, _ah_);
   }
   function label(_ac_, _ad_, _ae_){
    return create$0(cst_label, _ac_, _ad_, _ae_);
   }
   function li(_$_, _aa_, _ab_){return create$0(cst_li, _$_, _aa_, _ab_);}
   function p(_Y_, _Z_, ___){return create$0(cst_p, _Y_, _Z_, ___);}
   function pre(_V_, _W_, _X_){return create$0(cst_pre, _V_, _W_, _X_);}
   function section(_S_, _T_, _U_){
    return create$0(cst_section, _S_, _T_, _U_);
   }
   function span(_P_, _Q_, _R_){return create$0(cst_span, _P_, _Q_, _R_);}
   function strong(_M_, _N_, _O_){return create$0(cst_strong, _M_, _N_, _O_);}
   function table(_J_, _K_, _L_){return create$0(cst_table, _J_, _K_, _L_);}
   function tbody(_G_, _H_, _I_){return create$0(cst_tbody, _G_, _H_, _I_);}
   function td(_D_, _E_, _F_){return create$0(cst_td, _D_, _E_, _F_);}
   function th(_A_, _B_, _C_){return create$0(cst_th, _A_, _B_, _C_);}
   function thead(_x_, _y_, _z_){return create$0(cst_thead, _x_, _y_, _z_);}
   function tr(_u_, _v_, _w_){return create$0(cst_tr, _u_, _v_, _w_);}
   function ul(_r_, _s_, _t_){return create$0(cst_ul, _r_, _s_, _t_);}
   function ol(_o_, _p_, _q_){return create$0(cst_ol, _o_, _p_, _q_);}
   function br(_l_, _m_, _n_){return create_childless(cst_br, _l_, _m_, _n_);}
   function hr(_i_, _j_, _k_){return create_childless(cst_hr, _i_, _j_, _k_);}
   function sexp_for_debugging(indent, sexp){
    var
     s = caml_call2(Base[84][13], indent, sexp),
     _h_ = caml_call1(Base_List[28], [0, s]);
    return create$0(cst_pre, 0, [0, Virtual_dom_Attr[10]], _h_);
   }
   function create$1(previous, current){
    var _f_ = t_to_js(current), _g_ = t_to_js(previous);
    return caml_call2(Virtual_dom_Raw[5][3], _g_, _f_);
   }
   function apply(t, elt){return caml_call2(Virtual_dom_Raw[5][4], elt, t);}
   function is_empty(t){return caml_call1(Virtual_dom_Raw[5][5], t);}
   var Patch = [0, create$1, apply, is_empty];
   function create$2(key, tag, attrs, children){
    return [1, element_expert(-847254184, tag, key, attrs, children)];
   }
   function create_svg$0(key, tag, attrs, children){
    return [1, element_expert(4153924, tag, key, attrs, children)];
   }
   var Expert = [0, create$2, create_svg$0];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Node);
   var
    Virtual_dom_Node =
      [0,
       [0,
        tag,
        attrs,
        key,
        with_key,
        map_attrs,
        add_style,
        add_class,
        add_classes],
       [0],
       Aliases,
       0,
       text,
       textf,
       a,
       body,
       button,
       code,
       div,
       main,
       footer,
       fieldset,
       h1,
       h2,
       h3,
       h4,
       h5,
       h6,
       header,
       html,
       input,
       textarea,
       select,
       option,
       label,
       li,
       p,
       pre,
       section,
       span,
       strong,
       table,
       tbody,
       td,
       th,
       thead,
       tr,
       ul,
       ol,
       br,
       hr,
       sexp_for_debugging,
       inner_html$0,
       inner_html_svg,
       create$0,
       create_svg,
       to_dom,
       t_to_js,
       widget,
       widget_of_module,
       Patch,
       Expert];
   runtime.caml_register_global(68, Virtual_dom_Node, cst_Virtual_dom_Node);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom__Vdom
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Virtual_dom__Attr
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom_Vdom = "Virtual_dom__Vdom",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Virtual_dom_Attr = global_data.Virtual_dom__Attr;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom_Vdom);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/vdom.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   var
    create = Virtual_dom_Attr[1],
    create_float = Virtual_dom_Attr[2],
    string_property = Virtual_dom_Attr[3],
    bool_property = Virtual_dom_Attr[4],
    property = Virtual_dom_Attr[5],
    suppress_merge_warnings = Virtual_dom_Attr[6],
    create_hook = Virtual_dom_Attr[7],
    many = Virtual_dom_Attr[8],
    many_without_merge = Virtual_dom_Attr[9],
    empty = Virtual_dom_Attr[10],
    symbol = Virtual_dom_Attr[11],
    combine = Virtual_dom_Attr[12],
    autofocus = Virtual_dom_Attr[13],
    checked = Virtual_dom_Attr[14],
    class$0 = Virtual_dom_Attr[15],
    classes = Virtual_dom_Attr[16],
    classes$0 = Virtual_dom_Attr[17],
    disabled = Virtual_dom_Attr[18],
    for$0 = Virtual_dom_Attr[19],
    href = Virtual_dom_Attr[20],
    target = Virtual_dom_Attr[21],
    id = Virtual_dom_Attr[22],
    name = Virtual_dom_Attr[23],
    placeholder = Virtual_dom_Attr[24],
    selected = Virtual_dom_Attr[25],
    hidden = Virtual_dom_Attr[26],
    readonly = Virtual_dom_Attr[27],
    style = Virtual_dom_Attr[28],
    min = Virtual_dom_Attr[29],
    max = Virtual_dom_Attr[30],
    colspan = Virtual_dom_Attr[31],
    rowspan = Virtual_dom_Attr[32],
    draggable = Virtual_dom_Attr[33],
    tabindex = Virtual_dom_Attr[34],
    type = Virtual_dom_Attr[35],
    value = Virtual_dom_Attr[36],
    value_prop = Virtual_dom_Attr[37],
    title = Virtual_dom_Attr[38],
    src = Virtual_dom_Attr[39],
    on_focus = Virtual_dom_Attr[40],
    on_blur = Virtual_dom_Attr[41],
    Unmerged_warning_mode = Virtual_dom_Attr[42],
    to_raw = Virtual_dom_Attr[43],
    on_input = Virtual_dom_Attr[44],
    on_change = Virtual_dom_Attr[45],
    on_file_input = Virtual_dom_Attr[46],
    on_click = Virtual_dom_Attr[47],
    on_contextmenu = Virtual_dom_Attr[48],
    on_double_click = Virtual_dom_Attr[49],
    on_drag = Virtual_dom_Attr[50],
    on_dragstart = Virtual_dom_Attr[51],
    on_dragend = Virtual_dom_Attr[52],
    on_dragenter = Virtual_dom_Attr[53],
    on_dragleave = Virtual_dom_Attr[54],
    on_dragover = Virtual_dom_Attr[55],
    on_drop = Virtual_dom_Attr[56],
    on_mousemove = Virtual_dom_Attr[57],
    on_mouseup = Virtual_dom_Attr[58],
    on_mousedown = Virtual_dom_Attr[59],
    on_mouseenter = Virtual_dom_Attr[60],
    on_mouseleave = Virtual_dom_Attr[61],
    on_mouseover = Virtual_dom_Attr[62],
    on_mouseout = Virtual_dom_Attr[63],
    on_keyup = Virtual_dom_Attr[64],
    on_keypress = Virtual_dom_Attr[65],
    on_keydown = Virtual_dom_Attr[66],
    on_scroll = Virtual_dom_Attr[67],
    on_submit = Virtual_dom_Attr[68],
    on_pointerdown = Virtual_dom_Attr[69],
    on_pointerup = Virtual_dom_Attr[70],
    on_mousewheel = Virtual_dom_Attr[71],
    on_copy = Virtual_dom_Attr[72],
    on_cut = Virtual_dom_Attr[73],
    on_paste = Virtual_dom_Attr[74],
    on_reset = Virtual_dom_Attr[75],
    on_animationend = Virtual_dom_Attr[76],
    Multi = Virtual_dom_Attr[77],
    Always_focus_hook = Virtual_dom_Attr[78],
    Single_focus_hook = Virtual_dom_Attr[79],
    Expert = Virtual_dom_Attr[80],
    Attr =
      [0,
       create,
       create_float,
       string_property,
       bool_property,
       property,
       suppress_merge_warnings,
       create_hook,
       many,
       many_without_merge,
       empty,
       symbol,
       combine,
       autofocus,
       checked,
       class$0,
       classes,
       classes$0,
       disabled,
       for$0,
       href,
       target,
       id,
       name,
       placeholder,
       selected,
       hidden,
       readonly,
       style,
       min,
       max,
       colspan,
       rowspan,
       draggable,
       tabindex,
       type,
       value,
       value_prop,
       title,
       src,
       on_focus,
       on_blur,
       Unmerged_warning_mode,
       to_raw,
       on_input,
       on_change,
       on_file_input,
       on_click,
       on_contextmenu,
       on_double_click,
       on_drag,
       on_dragstart,
       on_dragend,
       on_dragenter,
       on_dragleave,
       on_dragover,
       on_drop,
       on_mousemove,
       on_mouseup,
       on_mousedown,
       on_mouseenter,
       on_mouseleave,
       on_mouseover,
       on_mouseout,
       on_keyup,
       on_keypress,
       on_keydown,
       on_scroll,
       on_submit,
       on_pointerdown,
       on_pointerup,
       on_mousewheel,
       on_copy,
       on_cut,
       on_paste,
       on_reset,
       on_animationend,
       Multi,
       Always_focus_hook,
       Single_focus_hook,
       Expert];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom_Vdom);
   var Virtual_dom_Vdom = [0, Attr];
   runtime.caml_register_global(12, Virtual_dom_Vdom, cst_Virtual_dom_Vdom);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Virtual_dom
//# unitInfo: Requires: Css_gen, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Virtual_dom__Dom_float
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Virtual_dom = "Virtual_dom",
    cst_virtual_dom = "virtual_dom";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Virtual_dom_Dom_float = global_data.Virtual_dom__Dom_float,
    Css_gen = global_data.Css_gen;
   caml_call1(Ppx_module_timer_runtime[4], cst_Virtual_dom);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][1], "src/virtual_dom.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_virtual_dom, cst);
   Css_gen[94][1][1] = Virtual_dom_Dom_float[6];
   var Top_level_effects = [0];
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_virtual_dom);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Virtual_dom);
   var Virtual_dom = [0, Top_level_effects];
   runtime.caml_register_global(13, Virtual_dom, cst_Virtual_dom);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
