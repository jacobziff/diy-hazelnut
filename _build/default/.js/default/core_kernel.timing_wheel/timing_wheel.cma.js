// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1

//# unitInfo: Provides: Timing_wheel__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Timing_wheel = [0];
   runtime.caml_register_global(0, Timing_wheel, "Timing_wheel__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Timing_wheel__Import
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Timing_wheel_Import = "Timing_wheel__Import",
    cst_timing_wheel = "timing_wheel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Timing_wheel_Import);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_timing_wheel);
   caml_call1(Expect_test_collector[5][1], "timing_wheel/src/import.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_timing_wheel, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_timing_wheel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Timing_wheel_Import);
   var Timing_wheel_Import = [0];
   runtime.caml_register_global
    (11, Timing_wheel_Import, cst_Timing_wheel_Import);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Timing_wheel__Timing_wheel_intf
//# unitInfo: Requires: Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Timing_wheel_Timing_wheel_ = "Timing_wheel__Timing_wheel_intf",
    cst_timing_wheel = "timing_wheel";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime;
   caml_call1(Ppx_module_timer_runtime[4], cst_Timing_wheel_Timing_wheel_);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_timing_wheel);
   caml_call1
    (Expect_test_collector[5][1], "timing_wheel/src/timing_wheel_intf.ml");
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_timing_wheel, cst);
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_timing_wheel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Timing_wheel_Timing_wheel_);
   var Timing_wheel_Timing_wheel_intf = [0];
   runtime.caml_register_global
    (11, Timing_wheel_Timing_wheel_intf, cst_Timing_wheel_Timing_wheel_);
   return;
  }
  (globalThis));

//# unitInfo: Provides: Timing_wheel
//# unitInfo: Requires: Assert_failure, Base__Field, Base__Invariant, Base__Sexpable, Core, Core__Array, Core__Binable, Core__Int, Core__Int63, Core__List, Core__Time_ns, Core__Time_ns_alternate_sexp, Expect_test_collector, Ppx_assert_lib__Runtime, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Tuple_pool
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Timing_wheel = "Timing_wheel",
    cst_Timing_wheel_max_alarm_tim$1 =
      "Timing_wheel.max_alarm_time_in_min_interval_exn of empty timing wheel",
    cst$0 = "_",
    cst_alarm_precision$0 = "alarm_precision",
    cst_at = "at",
    cst_bits = "bits",
    cst_bits_per_slot = "bits_per_slot",
    cst_capacity = "capacity",
    cst_config = "config",
    cst_diff_max_min_allowed_key = "diff_max_min_allowed_key",
    cst_elt_key_lower_bound = "elt_key_lower_bound",
    cst_index = "index",
    cst_interval_num = "interval_num",
    cst_key = "key",
    cst_keys_per_slot = "keys_per_slot",
    cst_length = "length",
    cst_level_bits = "level_bits",
    cst_levels = "levels",
    cst_max_allowed_alarm_time = "max_allowed_alarm_time",
    cst_max_allowed_key = "max_allowed_key",
    cst_max_interval_num = "max_interval_num",
    cst_min_allowed_key = "min_allowed_key",
    cst_min_elt = "min_elt",
    cst_min_key_in_same_slot_mask = "min_key_in_same_slot_mask",
    cst_now = "now",
    cst_now_interval_num_start = "now_interval_num_start",
    cst_pool = "pool",
    cst_priority_queue = "priority_queue",
    cst_slots = "slots",
    cst_slots_mask = "slots_mask",
    cst_start = "start",
    cst_timing_wheel = "timing_wheel",
    cst_timing_wheel_src_timing_wh = "timing_wheel/src/timing_wheel.ml",
    cst_value = "value",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    pos$9 = "timing_wheel/src/timing_wheel.ml:1631:26",
    pos$8 = "timing_wheel/src/timing_wheel.ml:1628:26",
    pos$7 = "timing_wheel/src/timing_wheel.ml:1644:26",
    pos$6 = "timing_wheel/src/timing_wheel.ml:1649:26",
    arg_108 = [0, cst$0],
    pos$5 = "timing_wheel/src/timing_wheel.ml:1006:32",
    pos$4 = "timing_wheel/src/timing_wheel.ml:1003:32",
    pos$3 = "timing_wheel/src/timing_wheel.ml:902:31",
    pos$2 = "timing_wheel/src/timing_wheel.ml:909:30",
    pos$1 = "timing_wheel/src/timing_wheel.ml:921:31",
    pos$0 = "timing_wheel/src/timing_wheel.ml:939:32",
    pos = "timing_wheel/src/timing_wheel.ml:944:30",
    cst = "",
    error_source_039 = "timing_wheel/src/timing_wheel.ml.Config.t",
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Core = global_data.Core,
    Core_Time_ns_alternate_sexp = global_data.Core__Time_ns_alternate_sexp,
    Assert_failure = global_data.Assert_failure,
    Ppx_assert_lib_Runtime = global_data.Ppx_assert_lib__Runtime,
    Base_Invariant = global_data.Base__Invariant,
    Core_Time_ns = global_data.Core__Time_ns,
    Core_List = global_data.Core__List;
   global_data.Base__Field;
   var
    Core_Int63 = global_data.Core__Int63,
    Core_Array = global_data.Core__Array,
    Tuple_pool = global_data.Tuple_pool,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core_Int = global_data.Core__Int,
    Core_Binable = global_data.Core__Binable,
    Base_Sexpable = global_data.Base__Sexpable;
   caml_call1(Ppx_module_timer_runtime[4], cst_Timing_wheel);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1], cst_timing_wheel);
   caml_call1(Expect_test_collector[5][1], cst_timing_wheel_src_timing_wh);
   caml_call2(Ppx_inline_test_lib_Runtime[2], cst_timing_wheel, cst);
   var
    max_time = Core_Time_ns_alternate_sexp[45],
    min_time = Core_Time_ns_alternate_sexp[43],
    zero = Core_Int[55],
    to_int = Core_Int[61],
    t_of_sexp = Core_Int[79],
    sexp_of_t = Core_Int[80],
    symbol = Core_Int[84],
    symbol$0 = Core_Int[85],
    symbol$1 = Core_Int[87],
    equal = Core_Int[90],
    max_num_bits = Core_Int63[58] - 1 | 0,
    min_value = 0,
    _a_ = [0, cst_timing_wheel_src_timing_wh, 83, 4],
    _b_ = [0, cst_timing_wheel_src_timing_wh, 82, 4],
    _c_ = [0, cst_timing_wheel_src_timing_wh, 114, 4],
    _d_ = [0, cst_timing_wheel_src_timing_wh, 117, 6],
    cst_Level_bits_create_exn_requ =
      "Level_bits.create_exn requires a nonempty list",
    cst_Level_bits_create_exn_got_ =
      "Level_bits.create_exn got nonpositive num bits",
    _e_ = [0, "max_num_bits"],
    _f_ = [0, "got"],
    cst_Level_bits_create_exn_got_$0 =
      "Level_bits.create_exn got too many bits";
   function invariant(t){
    if(! caml_call2(symbol, t, min_value))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    if(caml_call2(symbol$0, t, max_num_bits)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   function of_int(i){invariant(i); return i;}
   function symbol$2(t1, t2){var t = t1 + t2 | 0; invariant(t); return t;}
   function symbol$3(t1, t2){var t = t1 - t2 | 0; invariant(t); return t;}
   function pow2(t){return caml_call2(Core_Int63[47], Core_Int63[14], t);}
   function sexp_of_t$0(x_007){
    return caml_call2(Core[421], sexp_of_t, x_007);
   }
   function num_bits_internal(t){
    return caml_call3(Core_List[10], t, zero, symbol$2);
   }
   function num_bits(t){return num_bits_internal(t);}
   function invariant$0(t){
    if(caml_call1(Core_List[8], t))
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    caml_call2
     (Core_List[9],
      t,
      function(num_key_bits){
       invariant(num_key_bits);
       if(caml_call2(symbol$1, num_key_bits, zero)) return 0;
       throw caml_maybe_attach_backtrace([0, Assert_failure, _d_], 1);
      });
    return invariant(num_bits_internal(t));
   }
   function t_of_sexp$0(x_006){
    var t = caml_call2(Core[422], t_of_sexp, x_006);
    invariant$0(t);
    return t;
   }
   function create_exn(opt, x_008){
    if(opt)
     var sth = opt[1], extend_to_max_num_bits = sth;
    else
     var extend_to_max_num_bits = 0;
    if(caml_call1(Core_List[8], x_008))
     caml_call1(Core[6], cst_Level_bits_create_exn_requ);
    if
     (caml_call2
       (Core_List[13],
        x_008,
        function(bits){return caml_call2(Core[89], bits, 0);})){
     var
      _dS_ = [0, caml_call2(Core[421], Core[356], x_008), 0],
      _dT_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Level_bits_create_exn_got_),
          _dS_]];
     caml_call1(Core[253], _dT_);
    }
    var
     num_bits =
       caml_call3
        (Core_List[10],
         x_008,
         0,
         function(_d1_, _d0_){return _d1_ + _d0_ | 0;});
    if(caml_call2(Core[91], num_bits, max_num_bits)){
     var
      _dU_ =
        [0, [1, [0, _e_, [0, caml_call1(Core[356], max_num_bits), 0]]], 0],
      _dV_ = [0, [1, [0, _f_, [0, caml_call1(Core[356], num_bits), 0]]], _dU_],
      _dW_ = [0, caml_call2(Core[421], Core[356], x_008), _dV_],
      _dX_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Level_bits_create_exn_got_$0),
          _dW_]];
     caml_call1(Core[253], _dX_);
    }
    if(extend_to_max_num_bits)
     var
      _dY_ = caml_call1(Core[230], 1),
      _dZ_ = caml_call2(Core_List[119], max_num_bits - num_bits | 0, _dY_),
      ints = caml_call2(Core[157], x_008, _dZ_);
    else
     var ints = x_008;
    return caml_call2(Core_List[72], ints, of_int);
   }
   var
    level_bits_default =
      create_exn
       (0, [0, 11, [0, 10, [0, 10, [0, 10, [0, 10, [0, 10, [0, 1, 0]]]]]]]),
    compare = Core[352],
    cst_Alarm_precision_to_span_of =
      "[Alarm_precision.to_span] of negative power of two nanoseconds";
   function equal$0(x_012, x_013){
    return 0 === caml_call2(compare, x_012, x_013) ? 1 : 0;
   }
   function to_sexpable(t){
    if(caml_call2(Core[92], t, 0)){
     var
      _dP_ = [0, caml_call1(Core[356], t), 0],
      _dQ_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Alarm_precision_to_span_of),
          _dP_]];
     caml_call1(Core[253], _dQ_);
    }
    var _dR_ = caml_call1(caml_call1(Core_Int63[47], Core_Int63[14]), t);
    return caml_call1(Core_Time_ns[1][127], _dR_);
   }
   function sexp_of_t$1(t){
    var _dO_ = to_sexpable(t);
    return caml_call1(Core_Time_ns[1][10], _dO_);
   }
   var
    about_one_microsecond = 10,
    _g_ = [0, "span"],
    cst_Alarm_precision_of_span_fl =
      "[Alarm_precision.of_span_floor_pow2_ns] got non-positive span";
   function mul(t, pow2){return t + pow2 | 0;}
   function div(t, pow2){return t - pow2 | 0;}
   function of_span_floor_pow2_ns(span){
    if(caml_call2(Core_Time_ns[1][16], span, Core_Time_ns[1][75])){
     var
      _dL_ =
        [0, [1, [0, _g_, [0, caml_call1(Core_Time_ns[1][10], span), 0]]], 0],
      _dM_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Alarm_precision_of_span_fl),
          _dL_]];
     caml_call1(Core[253], _dM_);
    }
    var _dN_ = caml_call1(Core_Time_ns[1][126], span);
    return caml_call1(Core_Int63[86], _dN_);
   }
   var
    _h_ = Core_Time_ns[1],
    _i_ =
      caml_call1
       (caml_call1
         (Core_Binable[6], [0, _h_[5], _h_[1], _h_[2], _h_[3], _h_[4]]),
        [0, to_sexpable, of_span_floor_pow2_ns]),
    bin_size_t = _i_[1],
    bin_write_t = _i_[2],
    bin_read_t = _i_[3],
    bin_read_t$0 = _i_[4],
    bin_shape_t = _i_[5],
    bin_writer_t = _i_[6],
    bin_reader_t = _i_[7],
    bin_t = _i_[8],
    _j_ = Core_Time_ns[1],
    include =
      caml_call1
       (caml_call1(Base_Sexpable[1], [0, _j_[9], _j_[10]]),
        [0, to_sexpable, of_span_floor_pow2_ns]),
    t_of_sexp$1 = include[1],
    sexp_of_t$2 = include[2],
    _k_ =
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t,
       bin_writer_t,
       bin_reader_t,
       bin_t,
       compare,
       t_of_sexp$1,
       sexp_of_t$2];
   function level_bits(r){return r[2];}
   var
    level_bits$0 =
      [0,
       function(param){return 0;},
       cst_level_bits,
       0,
       level_bits,
       function(r, v){return [0, r[1], v, r[3]];}],
    _l_ = [0, cst_timing_wheel_src_timing_wh, 235, 2],
    cst_alarm_precision = cst_alarm_precision$0,
    _m_ = [0, cst_capacity],
    _n_ = [0, cst_level_bits],
    _o_ = [0, cst_alarm_precision$0],
    _p_ = [0, cst_timing_wheel_src_timing_wh, 257, 6],
    _q_ = [0, cst_timing_wheel_src_timing_wh, 256, 8261, 8285],
    _r_ = [0, 10, [0, 10, [0, 6, [0, 6, [0, 5, 0]]]]];
   function t_of_sexp$2(sexp_019){
    if(0 === sexp_019[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[16], error_source_039, sexp_019);
    var
     field_sexps_020 = sexp_019[1],
     alarm_precision_021 = [0, 0],
     level_bits_023 = [0, 0],
     capacity_025 = [0, 0],
     duplicates_027 = [0, 0],
     extra_028 = [0, 0];
    a:
    {
     b:
     c:
     d:
     {
      e:
      {
       var param = field_sexps_020;
       for(;;){
        if(! param) break;
        var sexp_019$0 = param[1];
        if(1 !== sexp_019$0[0]) break b;
        var _dI_ = sexp_019$0[1];
        if(! _dI_) break c;
        var _dJ_ = _dI_[1];
        if(0 !== _dJ_[0]) break e;
        var field_sexps_031 = _dI_[2], field_name_029 = _dJ_[1];
        if(field_sexps_031 && field_sexps_031[2]) break d;
        var tail_041 = param[2];
        let field_sexps_031$0 = field_sexps_031;
        var
         field_sexp_030 =
           function(param){
            if(! field_sexps_031$0)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[10], error_source_039, sexp_019);
            if(field_sexps_031$0[2])
             throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
            var x_042 = field_sexps_031$0[1];
            return x_042;
           };
        if(field_name_029 !== cst_alarm_precision$0)
         if(field_name_029 !== cst_capacity)
          if(field_name_029 !== cst_level_bits){
           if(Sexplib0_Sexp_conv[26][1])
            extra_028[1] = [0, field_name_029, extra_028[1]];
          }
          else if(level_bits_023[1])
           duplicates_027[1] = [0, field_name_029, duplicates_027[1]];
          else{
           var
            field_sexp_030$0 = field_sexp_030(0),
            fvalue_034 = t_of_sexp$0(field_sexp_030$0);
           level_bits_023[1] = [0, fvalue_034];
          }
         else if(capacity_025[1])
          duplicates_027[1] = [0, field_name_029, duplicates_027[1]];
         else{
          var
           field_sexp_030$1 = field_sexp_030(0),
           fvalue_032 = caml_call1(Core[357], field_sexp_030$1);
          capacity_025[1] = [0, fvalue_032];
         }
        else if(alarm_precision_021[1])
         duplicates_027[1] = [0, field_name_029, duplicates_027[1]];
        else{
         var
          field_sexp_030$2 = field_sexp_030(0),
          fvalue_035 = caml_call1(_k_[10], field_sexp_030$2);
         alarm_precision_021[1] = [0, fvalue_035];
        }
        param = tail_041;
       }
       break a;
      }
      break c;
     }
     caml_call2(Sexplib0_Sexp_conv_error[10], error_source_039, sexp_019$0);
    }
    if(duplicates_027[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[12],
              error_source_039,
              duplicates_027[1],
              sexp_019);
    if(extra_028[1])
     return caml_call3
             (Sexplib0_Sexp_conv_error[13],
              error_source_039,
              extra_028[1],
              sexp_019);
    var
     _dK_ = alarm_precision_021[1],
     level_bits_024 = level_bits_023[1],
     match = capacity_025[1];
    if(! _dK_)
     return caml_call3
             (Sexplib0_Sexp_conv_error[15],
              error_source_039,
              sexp_019,
              [0,
               [0, 0 === alarm_precision_021[1] ? 1 : 0, cst_alarm_precision],
               0]);
    var alarm_precision_022 = _dK_[1];
    if(level_bits_024)
     var v_038 = level_bits_024[1], v_038$0 = v_038;
    else
     var v_038$0 = level_bits_default;
    return [0, alarm_precision_022, v_038$0, match];
   }
   function sexp_of_t$3(param){
    var
     capacity_048 = param[3],
     level_bits_046 = param[2],
     alarm_precision_044 = param[1],
     bnds_043 = 0;
    if(capacity_048)
     var
      v_049 = capacity_048[1],
      arg_051 = caml_call1(Core[356], v_049),
      bnd_050 = [1, [0, _m_, [0, arg_051, 0]]],
      bnds_043$0 = [0, bnd_050, bnds_043];
    else
     var bnds_043$0 = bnds_043;
    var
     arg_047 = sexp_of_t$0(level_bits_046),
     bnds_043$1 = [0, [1, [0, _n_, [0, arg_047, 0]]], bnds_043$0],
     arg_045 = caml_call1(_k_[11], alarm_precision_044),
     bnds_043$2 = [0, [1, [0, _o_, [0, arg_045, 0]]], bnds_043$1];
    return [1, bnds_043$2];
   }
   function alarm_precision(t){return to_sexpable(t[1]);}
   function max_num_level_bits(alarm_precision){
    invariant(alarm_precision);
    return symbol$3(max_num_bits, alarm_precision);
   }
   function invariant$1(t){
    return caml_call4
            (Base_Invariant[1],
             _q_,
             t,
             sexp_of_t$3,
             function(param){
              var _dH_ = max_num_level_bits(t[1]);
              if(! caml_call2(symbol$0, num_bits_internal(t[2]), _dH_))
               throw caml_maybe_attach_backtrace([0, Assert_failure, _p_], 1);
              var
               level_bits_fun = caml_call2(Base_Invariant[2], t, invariant$0);
              caml_call1(level_bits_fun, level_bits$0);
              return 0;
             });
   }
   function create(capacity, opt, alarm_precision, param){
    if(opt)
     var sth = opt[1], level_bits = sth;
    else
     var level_bits = level_bits_default;
    var max_num_bits = max_num_level_bits(alarm_precision);
    if(caml_call2(symbol$0, num_bits_internal(level_bits), max_num_bits))
     var level_bits$0 = level_bits;
    else
     var
      loop =
        function(t, remaining){
         if(! t) return 0;
         var t$0 = t[2], b = t[1];
         return caml_call2(symbol, b, remaining)
                 ? [0, remaining, 0]
                 : [0, b, loop(t$0, symbol$3(remaining, b))];
        },
      level_bits$0 = loop(level_bits, max_num_bits);
    return [0, alarm_precision, level_bits$0, capacity];
   }
   function microsecond_precision(param){
    return create(0, [0, create_exn(0, _r_)], about_one_microsecond, 0);
   }
   function durations(t){
    var t$0 = t[1];
    invariant(t$0);
    var _dF_ = caml_call1(to_int, t$0);
    return caml_call3
            (Core_List[73],
             t[2],
             _dF_,
             function(num_bits_accum, level_num_bits){
              var
               num_bits_accum$0 =
                 num_bits_accum + caml_call1(to_int, level_num_bits) | 0,
               _dG_ =
                 caml_call2
                   (Core[90], num_bits_accum$0, Core_Int63[58] - 1 | 0)
                  ? Core_Int63[59]
                  : caml_call2
                    (Core_Int63[47], Core_Int63[14], num_bits_accum$0),
               duration = caml_call1(Core_Time_ns[1][127], _dG_);
              return [0, num_bits_accum$0, duration];
             });
   }
   var compare$0 = Core_Int63[110], sexp_of_t$4 = Core_Int63[99];
   function create$0(level_bits){
    var _dD_ = Core_Int63[14], _dE_ = pow2(level_bits);
    return caml_call2(Core_Int63[17], _dE_, _dD_);
   }
   var
    one = Core_Int63[14],
    symbol$4 = Core_Int63[17],
    bit_not = Core_Int63[45],
    sexp_of_t$5 = Core_Int63[99],
    equal$1 = Core_Int63[109];
   function create$1(bits_per_slot){
    return caml_call1(bit_not, caml_call2(symbol$4, pow2(bits_per_slot), one));
   }
   var
    to_int_exn = Core_Int63[5],
    zero$0 = Core_Int63[13],
    one$0 = Core_Int63[14],
    symbol$5 = Core_Int63[16],
    symbol$6 = Core_Int63[18],
    succ = Core_Int63[39],
    pred = Core_Int63[40],
    max_value = Core_Int63[59],
    of_int$0 = Core_Int63[69],
    sexp_of_t$6 = Core_Int63[99],
    symbol$7 = Core_Int63[103],
    symbol$8 = Core_Int63[104],
    symbol$9 = Core_Int63[105],
    symbol$10 = Core_Int63[106],
    symbol$11 = Core_Int63[107],
    symbol$12 = Core_Int63[108],
    equal$2 = Core_Int63[109],
    compare$1 = Core_Int63[110],
    min = Core_Int63[111],
    max = Core_Int63[112],
    ascending = Core_Int63[113],
    descending = Core_Int63[114],
    between = Core_Int63[115],
    clamp_exn = Core_Int63[116],
    clamp = Core_Int63[117],
    Replace_polymorphic_compare = Core_Int63[118],
    comparator = Core_Int63[119],
    Map = Core_Int63[120],
    Set = Core_Int63[121],
    validate_lbound = Core_Int63[128],
    validate_ubound = Core_Int63[129],
    validate_bound = Core_Int63[130];
   function to_int63(t){return t;}
   function of_int63(i){return i;}
   function scale_int(t, i){
    return caml_call2(symbol$6, t, caml_call1(of_int$0, i));
   }
   var
    to_int_exn$0 = Core_Int63[5],
    zero$1 = Core_Int63[13],
    one$1 = Core_Int63[14],
    symbol$13 = Core_Int63[16],
    symbol$14 = Core_Int63[17],
    rem = Core_Int63[25],
    succ$0 = Core_Int63[39],
    pred$0 = Core_Int63[40],
    bit_and = Core_Int63[42],
    shift_right = Core_Int63[48],
    max_value$0 = Core_Int63[59],
    min_value$0 = Core_Int63[60],
    of_int$1 = Core_Int63[69],
    sexp_of_t$7 = Core_Int63[99],
    symbol$15 = Core_Int63[103],
    symbol$16 = Core_Int63[104],
    symbol$17 = Core_Int63[105],
    symbol$18 = Core_Int63[106],
    symbol$19 = Core_Int63[107],
    symbol$20 = Core_Int63[108],
    equal$3 = Core_Int63[109],
    compare$2 = Core_Int63[110],
    min$0 = Core_Int63[111],
    max$0 = Core_Int63[112],
    ascending$0 = Core_Int63[113],
    descending$0 = Core_Int63[114],
    between$0 = Core_Int63[115],
    clamp_exn$0 = Core_Int63[116],
    clamp$0 = Core_Int63[117],
    Replace_polymorphic_compare$0 = Core_Int63[118],
    comparator$0 = Core_Int63[119],
    Map$0 = Core_Int63[120],
    Set$0 = Core_Int63[121],
    hash_fold_t = Core_Int63[122],
    hash = Core_Int63[123],
    hashable = Core_Int63[124],
    Table = Core_Int63[125],
    Hash_set = Core_Int63[126],
    Hash_queue = Core_Int63[127],
    validate_lbound$0 = Core_Int63[128],
    validate_ubound$0 = Core_Int63[129],
    validate_bound$0 = Core_Int63[130];
   function of_int63$0(i){return i;}
   function to_int63$0(t){return t;}
   function add(t, i){return caml_call2(symbol$13, t, i);}
   function add_clamp_to_max(t, i){
    return caml_call2(symbol$18, t, caml_call2(symbol$14, max_value$0, i))
            ? max_value$0
            : caml_call2(symbol$13, t, i);
   }
   function sub(t, i){return caml_call2(symbol$14, t, i);}
   function diff(t1, t2){return caml_call2(symbol$14, t1, t2);}
   var
    _s_ = Set$0[1],
    _t_ = Map$0[1],
    _u_ = Set[1],
    _v_ = Map[1],
    _w_ =
      [0,
       sexp_of_t$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       equal$2,
       compare$1,
       min,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       comparator,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       [0,
        [0, _v_[9], _v_[10], _v_[11]],
        Map[2],
        Map[3],
        Map[4],
        Map[5],
        Map[6],
        Map[7],
        Map[8],
        Map[9],
        Map[10],
        Map[11],
        Map[12],
        Map[13],
        Map[14],
        Map[15],
        Map[16],
        Map[17],
        Map[18],
        Map[19],
        Map[20],
        Map[21],
        Map[22],
        Map[23],
        Map[24],
        Map[25],
        Map[26],
        Map[27],
        Map[28],
        Map[29],
        Map[30],
        Map[31],
        Map[32],
        Map[33],
        Map[34],
        Map[35],
        Map[36],
        Map[37],
        Map[38],
        Map[39],
        Map[40],
        Map[41],
        Map[42],
        Map[43],
        Map[44],
        Map[45],
        Map[46],
        Map[47],
        Map[48],
        Map[49],
        Map[50],
        Map[51],
        Map[52],
        Map[53],
        Map[54],
        Map[55],
        Map[56],
        Map[57],
        Map[58],
        Map[59],
        Map[60],
        Map[61],
        Map[62],
        Map[63],
        Map[64],
        Map[65],
        Map[66],
        Map[67],
        Map[68],
        Map[69],
        Map[70],
        Map[71],
        Map[72],
        Map[73],
        Map[74],
        Map[75],
        Map[76],
        Map[77],
        Map[78],
        Map[79],
        Map[80],
        Map[81],
        Map[82],
        Map[83],
        Map[84],
        Map[85],
        Map[86],
        Map[87],
        Map[88],
        Map[89],
        Map[90],
        Map[91],
        Map[92],
        Map[93],
        Map[94],
        Map[95],
        Map[96],
        Map[97],
        Map[98],
        Map[99],
        Map[100],
        Map[101],
        Map[102],
        Map[103],
        Map[104],
        Map[105],
        Map[106],
        Map[107]],
       [0,
        [0, _u_[1], _u_[2], _u_[11]],
        Set[2],
        Set[3],
        Set[4],
        Set[5],
        Set[6],
        Set[7],
        Set[8],
        Set[9],
        Set[10],
        Set[11],
        Set[12],
        Set[13],
        Set[14],
        Set[15],
        Set[16],
        Set[17],
        Set[18],
        Set[19],
        Set[20],
        Set[21],
        Set[22],
        Set[23],
        Set[24],
        Set[25],
        Set[26],
        Set[27],
        Set[28],
        Set[29],
        Set[30],
        Set[31],
        Set[32],
        Set[33],
        Set[34],
        Set[35],
        Set[36],
        Set[37],
        Set[38],
        Set[39],
        Set[40],
        Set[41],
        Set[42],
        Set[43],
        Set[44],
        Set[45],
        Set[46],
        Set[47],
        Set[48],
        Set[49],
        Set[50],
        Set[51],
        Set[52],
        Set[53],
        Set[54],
        Set[55],
        Set[56],
        Set[57],
        Set[58],
        Set[59],
        Set[60],
        Set[61],
        Set[62],
        Set[63],
        Set[64],
        Set[65],
        Set[66],
        Set[67],
        Set[68],
        Set[69],
        Set[70],
        Set[71],
        Set[72],
        Set[73],
        Set[74],
        Set[75]],
       max,
       zero$0,
       one$0,
       max_value,
       of_int63,
       to_int63,
       of_int$0,
       to_int_exn,
       scale_int,
       pred,
       succ,
       symbol$5];
   function sexp_of_pool_slots(of_a_054, x_055){
    var
     _dz_ =
       caml_call1
        (Tuple_pool[36][3][1],
         function(_dC_){return sexp_of_pool_slots(of_a_054, _dC_);}),
     _dA_ =
       caml_call1
        (Tuple_pool[36][3][1],
         function(_dB_){return sexp_of_pool_slots(of_a_054, _dB_);});
    return caml_call7
            (Tuple_pool[36][1][8],
             sexp_of_t$7,
             Core_Time_ns_alternate_sexp[92],
             of_a_054,
             Core[356],
             _dA_,
             _dz_,
             x_055);
   }
   function sexp_of_t$8(of_a_056, x_057){
    return caml_call2
            (Tuple_pool[36][3][1],
             function(_dy_){return sexp_of_pool_slots(of_a_056, _dy_);},
             x_057);
   }
   var
    null$0 = Tuple_pool[36][3][4],
    null$1 = Tuple_pool[36][3][4],
    is_null = Tuple_pool[36][3][5],
    free = Tuple_pool[36][14];
   function key(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][3]);
   }
   function at(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][4]);
   }
   function value(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][5]);
   }
   function level_index(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][6]);
   }
   function prev(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][7]);
   }
   function set_prev(p, t, x){
    return caml_call4(Tuple_pool[36][33], p, t, Tuple_pool[36][2][7], x);
   }
   function next(p, t){
    return caml_call3(Tuple_pool[36][31], p, t, Tuple_pool[36][2][8]);
   }
   function set_next(p, t, x){
    return caml_call4(Tuple_pool[36][33], p, t, Tuple_pool[36][2][8], x);
   }
   function is_valid(p, t){return caml_call2(Tuple_pool[36][6], p, t);}
   var
    grow = Tuple_pool[36][12],
    is_full = Tuple_pool[36][13],
    cst_Timing_wheel_got_invalid_a = "Timing_wheel got invalid alarm";
   function of_external_exn(pool, t){
    if(is_valid(pool, t)) return t;
    var
     _dx_ = caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_got_invalid_a);
    return caml_call1(Core[253], _dx_);
   }
   function link(pool, prev, next){
    set_next(pool, prev, next);
    return set_prev(pool, next, prev);
   }
   function iter(pool, first, f){
    var current = [0, first], continue$0 = [0, 1];
    for(;;){
     if(! continue$0[1]) return 0;
     var next$0 = next(pool, current[1]);
     caml_call1(f, current[1]);
     if(caml_call2(Core[246], next$0, first))
      continue$0[1] = 0;
     else
      current[1] = next$0;
    }
   }
   function slots(r){return r[11];}
   function max_allowed_key(r){return r[10];}
   function set_max_allowed_key(r, v){r[10] = v; return 0;}
   function min_allowed_key(r){return r[9];}
   function set_min_allowed_key(r, v){r[9] = v; return 0;}
   function length(r){return r[8];}
   function set_length(r, v){r[8] = v; return 0;}
   function diff_max_min_allowed_key(r){return r[7];}
   function min_key_in_same_slot_mask(r){return r[6];}
   function keys_per_slot(r){return r[5];}
   function bits_per_slot(r){return r[4];}
   function slots_mask(r){return r[3];}
   function bits(r){return r[2];}
   function index(r){return r[1];}
   var
    slots$0 =
      [0,
       function(param){return 0;},
       cst_slots,
       0,
       slots,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                v];
       }],
    max_allowed_key$0 =
      [0,
       function(param){return 0;},
       cst_max_allowed_key,
       [0, set_max_allowed_key],
       max_allowed_key,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                v,
                r[11]];
       }],
    min_allowed_key$0 =
      [0,
       function(param){return 0;},
       cst_min_allowed_key,
       [0, set_min_allowed_key],
       min_allowed_key,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                v,
                r[10],
                r[11]];
       }],
    length$0 =
      [0,
       function(param){return 0;},
       cst_length,
       [0, set_length],
       length,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                v,
                r[9],
                r[10],
                r[11]];
       }],
    diff_max_min_allowed_key$0 =
      [0,
       function(param){return 0;},
       cst_diff_max_min_allowed_key,
       0,
       diff_max_min_allowed_key,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                v,
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    min_key_in_same_slot_mask$0 =
      [0,
       function(param){return 0;},
       cst_min_key_in_same_slot_mask,
       0,
       min_key_in_same_slot_mask,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                r[5],
                v,
                r[7],
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    keys_per_slot$0 =
      [0,
       function(param){return 0;},
       cst_keys_per_slot,
       0,
       keys_per_slot,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                r[4],
                v,
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    bits_per_slot$0 =
      [0,
       function(param){return 0;},
       cst_bits_per_slot,
       0,
       bits_per_slot,
       function(r, v){
        return [0,
                r[1],
                r[2],
                r[3],
                v,
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    slots_mask$0 =
      [0,
       function(param){return 0;},
       cst_slots_mask,
       0,
       slots_mask,
       function(r, v){
        return [0,
                r[1],
                r[2],
                v,
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    bits$0 =
      [0,
       function(param){return 0;},
       cst_bits,
       0,
       bits,
       function(r, v){
        return [0,
                r[1],
                v,
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    index$0 =
      [0,
       function(param){return 0;},
       cst_index,
       0,
       index,
       function(r, v){
        return [0,
                v,
                r[2],
                r[3],
                r[4],
                r[5],
                r[6],
                r[7],
                r[8],
                r[9],
                r[10],
                r[11]];
       }],
    _C_ = [0, cst_slots],
    _D_ = [0, cst_max_allowed_key],
    _E_ = [0, cst_min_allowed_key],
    _F_ = [0, cst_length],
    _G_ = [0, cst_diff_max_min_allowed_key],
    _H_ = [0, cst_min_key_in_same_slot_mask],
    _I_ = [0, cst_keys_per_slot],
    _J_ = [0, cst_bits_per_slot],
    _K_ = [0, cst_slots_mask],
    _L_ = [0, cst_bits],
    _M_ = [0, cst_index];
   function sexp_of_t$9(of_a_065, param){
    var
     diff_max_min_allowed_key_079 = param[7],
     min_key_in_same_slot_mask_077 = param[6],
     keys_per_slot_075 = param[5],
     bits_per_slot_073 = param[4],
     slots_mask_071 = param[3],
     bits_069 = param[2],
     index_067 = param[1],
     length_081 = param[8],
     min_allowed_key_083 = param[9],
     max_allowed_key_085 = param[10],
     slots_087 = param[11],
     arg_088 = caml_call1(Sexplib0_Sexp_conv[23], slots_087),
     bnds_066 = [0, [1, [0, _C_, [0, arg_088, 0]]], 0],
     arg_086 = caml_call1(sexp_of_t$7, max_allowed_key_085),
     bnds_066$0 = [0, [1, [0, _D_, [0, arg_086, 0]]], bnds_066],
     arg_084 = caml_call1(sexp_of_t$7, min_allowed_key_083),
     bnds_066$1 = [0, [1, [0, _E_, [0, arg_084, 0]]], bnds_066$0],
     arg_082 = caml_call1(Core[356], length_081),
     bnds_066$2 = [0, [1, [0, _F_, [0, arg_082, 0]]], bnds_066$1],
     arg_080 = caml_call1(_w_[1], diff_max_min_allowed_key_079),
     bnds_066$3 = [0, [1, [0, _G_, [0, arg_080, 0]]], bnds_066$2],
     arg_078 = caml_call1(sexp_of_t$5, min_key_in_same_slot_mask_077),
     bnds_066$4 = [0, [1, [0, _H_, [0, arg_078, 0]]], bnds_066$3],
     arg_076 = caml_call1(_w_[1], keys_per_slot_075),
     bnds_066$5 = [0, [1, [0, _I_, [0, arg_076, 0]]], bnds_066$4],
     arg_074 = caml_call1(sexp_of_t, bits_per_slot_073),
     bnds_066$6 = [0, [1, [0, _J_, [0, arg_074, 0]]], bnds_066$5],
     arg_072 = caml_call1(sexp_of_t$4, slots_mask_071),
     bnds_066$7 = [0, [1, [0, _K_, [0, arg_072, 0]]], bnds_066$6],
     arg_070 = caml_call1(sexp_of_t, bits_069),
     bnds_066$8 = [0, [1, [0, _L_, [0, arg_070, 0]]], bnds_066$7],
     arg_068 = caml_call1(Core[356], index_067),
     bnds_066$9 = [0, [1, [0, _M_, [0, arg_068, 0]]], bnds_066$8];
    return [1, bnds_066$9];
   }
   function slot(t, key){
    var slots_mask = t[3], bits_per_slot = t[4];
    return caml_call1
            (to_int_exn$0,
             caml_call2
              (bit_and,
               caml_call2(shift_right, key, bits_per_slot),
               slots_mask));
   }
   function next_slot(t, slot){
    var t$0 = t[3];
    return (slot + 1 | 0) & caml_call1(Core_Int63[5], t$0);
   }
   function min_key_in_same_slot(t, key){
    var min_key_in_same_slot_mask = t[6];
    return caml_call2(bit_and, key, min_key_in_same_slot_mask);
   }
   function compute_min_allowed_key(t, prev_level_max_allowed_key){
    return caml_call2(equal$3, prev_level_max_allowed_key, max_value$0)
            ? max_value$0
            : min_key_in_same_slot
              (t, caml_call1(succ$0, prev_level_max_allowed_key));
   }
   function levels(r){return r[5];}
   function elt_key_lower_bound(r){return r[4];}
   function set_elt_key_lower_bound(r, v){r[4] = v; return 0;}
   function min_elt(r){return r[3];}
   function set_min_elt(r, v){r[3] = v; return 0;}
   function pool(r){return r[2];}
   function set_pool(r, v){r[2] = v; return 0;}
   function length$1(r){return r[1];}
   function set_length$0(r, v){r[1] = v; return 0;}
   var
    levels$0 =
      [0,
       function(param){return 0;},
       cst_levels,
       0,
       levels,
       function(r, v){return [0, r[1], r[2], r[3], r[4], v];}],
    elt_key_lower_bound$0 =
      [0,
       function(param){return 0;},
       cst_elt_key_lower_bound,
       [0, set_elt_key_lower_bound],
       elt_key_lower_bound,
       function(r, v){return [0, r[1], r[2], r[3], v, r[5]];}],
    min_elt$0 =
      [0,
       function(param){return 0;},
       cst_min_elt,
       [0, set_min_elt],
       min_elt,
       function(r, v){return [0, r[1], r[2], v, r[4], r[5]];}],
    pool$0 =
      [0,
       function(param){return 0;},
       cst_pool,
       [0, set_pool],
       pool,
       function(r, v){return [0, r[1], v, r[3], r[4], r[5]];}],
    length$2 =
      [0,
       function(param){return 0;},
       cst_length,
       [0, set_length$0],
       length$1,
       function(r, v){return [0, v, r[2], r[3], r[4], r[5]];}],
    _S_ = [0, cst_value],
    _T_ = [0, cst_key],
    _U_ = [0, "elts"],
    _V_ = [0, cst_max_allowed_key],
    _W_ = [0, cst_min_allowed_key],
    _at_ = [0, cst_priority_queue],
    _au_ = [0, "max_allowed_key t"],
    _av_ = [0, "min_allowed_key t"],
    _aw_ = [0, cst_key],
    cst_Priority_queue_add_elt_key =
      "Priority_queue.add_elt key out of bounds",
    _ax_ = [0, cst$0],
    _ay_ = [0, "level"],
    _az_ = [0, cst_key],
    cst_Priority_queue_add_elt_key$0 =
      "Priority_queue.add_elt key out of level bounds",
    _aA_ = [0, "max_allowed_alarm_interval_num"],
    _aB_ = [0, "min_allowed_alarm_interval_num"],
    _aC_ = [0, cst_interval_num],
    cst_Timing_wheel_add_at_interv =
      "Timing_wheel.add_at_interval_num got invalid interval num";
   function is_empty(t){return caml_call2(Core[90], t[1], 0);}
   function num_levels(t){return t[5].length - 1;}
   function min_allowed_key$1(t){
    var r = caml_check_bound(t[5], 0)[1];
    return r[9];
   }
   function max_allowed_key$1(t){
    var
     _dw_ = num_levels(t) - 1 | 0,
     r = caml_check_bound(t[5], _dw_)[1 + _dw_];
    return r[10];
   }
   function internal_iter(t, f){
    var _do_ = caml_call2(Core[91], t[1], 0);
    if(_do_){
     var pool = t[2], levels = t[5], _dq_ = levels.length - 2 | 0, _dp_ = 0;
     if(_dq_ >= 0){
      var level_index = _dp_;
      for(;;){
       var level = caml_check_bound(levels, level_index)[1 + level_index];
       if(caml_call2(Core[91], level[8], 0)){
        var slots = level[11], _dt_ = slots.length - 2 | 0, _ds_ = 0;
        if(_dt_ >= 0){
         var slot_index = _ds_;
         for(;;){
          var elt = caml_check_bound(slots, slot_index)[1 + slot_index];
          if(1 - caml_call1(is_null, elt)) iter(pool, elt, f);
          var _dv_ = slot_index + 1 | 0;
          if(_dt_ === slot_index) break;
          slot_index = _dv_;
         }
        }
       }
       var _du_ = level_index + 1 | 0;
       if(_dq_ === level_index) break;
       level_index = _du_;
      }
     }
     var _dr_ = 0;
    }
    else
     var _dr_ = _do_;
    return _dr_;
   }
   function compute_diff_max_min_allowed_k(level_bits, bits_per_slot){
    var num_bits = symbol$2(level_bits, bits_per_slot);
    if(caml_call2(equal, num_bits, max_num_bits)) return _w_[26];
    var _dn_ = pow2(num_bits);
    return caml_call1(_w_[32], _dn_);
   }
   function min_elt$1(t){
    if(is_empty(t)) return caml_call1(null$1, 0);
    if(! caml_call1(is_null, t[3])) return t[3];
    var
     pool = t[2],
     min_elt_already_found = [0, caml_call1(null$1, 0)],
     min_key_already_found = [0, max_value$0],
     level_index = [0, 0],
     num_levels$0 = num_levels(t);
    for(;;){
     if(! caml_call2(Core[92], level_index[1], num_levels$0)){
      t[3] = min_elt_already_found[1];
      t[4] = min_key_already_found[1];
      return t[3];
     }
     var
      _dk_ = level_index[1],
      level = caml_check_bound(t[5], _dk_)[1 + _dk_];
     if(caml_call2(symbol$18, level[9], min_key_already_found[1]))
      level_index[1] = num_levels$0;
     else if(caml_call2(Core[90], level[8], 0))
      level_index[1]++;
     else{
      var
       slots = level[11],
       slot_min_key =
         [0, min_key_in_same_slot(level, caml_call2(max$0, level[9], t[4]))],
       slot$0 = [0, slot(level, slot_min_key[1])];
      for(;;){
       var _dl_ = slot$0[1];
       if(! caml_call1(is_null, caml_check_bound(slots, _dl_)[1 + _dl_]))
        break;
       if(! caml_call2(symbol$19, slot_min_key[1], min_key_already_found[1]))
        break;
       slot$0[1] = next_slot(level, slot$0[1]);
       var i = level[5], t$0 = slot_min_key[1];
       slot_min_key[1] = caml_call2(symbol$13, t$0, i);
      }
      var _dm_ = slot$0[1], first = caml_check_bound(slots, _dm_)[1 + _dm_];
      if(1 - caml_call1(is_null, first)){
       var continue$0 = [0, 1], current = [0, first];
       for(;;){
        if(! continue$0[1]) break;
        var current_key = key(pool, current[1]);
        if(caml_call2(symbol$16, current_key, min_key_already_found[1])){
         min_elt_already_found[1] = current[1];
         min_key_already_found[1] = current_key;
        }
        var next$0 = next(pool, current[1]);
        a:
        {
         if
          (!
           caml_call2(Core[246], next$0, first)
           && ! caml_call2(Core[90], level_index[1], 0)){current[1] = next$0; break a;}
         continue$0[1] = 0;
        }
       }
      }
      level_index[1]++;
     }
    }
   }
   function add_elt(x_135, to_add){
    var
     pool$0 = x_135[2],
     key$0 = key(pool$0, to_add),
     _dd_ = caml_call2(symbol$15, key$0, min_allowed_key$1(x_135)),
     _de_ =
       _dd_ ? caml_call2(symbol$16, key$0, max_allowed_key$1(x_135)) : _dd_;
    if(1 - _de_){
     var pool = x_135[2], r = [0, 0];
     internal_iter
      (x_135,
       function(elt){
        var _di_ = r[1], _dj_ = value(pool, elt);
        r[1] = [0, [0, key(pool, elt), _dj_], _di_];
        return 0;
       });
     var
      elts_115 = caml_call1(Core_List[34], r[1]),
      max_allowed_key_113 = max_allowed_key$1(x_135),
      min_allowed_key_111 = min_allowed_key$1(x_135),
      arg_116 =
        caml_call2
         (Core[421],
          function(param){
           var
            key_105 = param[1],
            bnds_104 = [0, [1, [0, _S_, [0, arg_108, 0]]], 0],
            arg_106 = caml_call1(sexp_of_t$7, key_105),
            bnds_104$0 = [0, [1, [0, _T_, [0, arg_106, 0]]], bnds_104];
           return [1, bnds_104$0];
          },
          elts_115),
      bnds_110 = [0, [1, [0, _U_, [0, arg_116, 0]]], 0],
      arg_114 = caml_call1(sexp_of_t$7, max_allowed_key_113),
      bnds_110$0 = [0, [1, [0, _V_, [0, arg_114, 0]]], bnds_110],
      arg_112 = caml_call1(sexp_of_t$7, min_allowed_key_111),
      bnds_110$1 = [0, [1, [0, _W_, [0, arg_112, 0]]], bnds_110$0],
      _c8_ =
        [0,
         [1,
          [0, _au_, [0, caml_call1(sexp_of_t$7, max_allowed_key$1(x_135)), 0]]],
         [0, [1, [0, _at_, [0, [1, bnds_110$1], 0]]], 0]],
      _c9_ =
        [0,
         [1,
          [0, _av_, [0, caml_call1(sexp_of_t$7, min_allowed_key$1(x_135)), 0]]],
         _c8_],
      _c__ = [0, [1, [0, _aw_, [0, caml_call1(sexp_of_t$7, key$0), 0]]], _c9_],
      _c$_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Priority_queue_add_elt_key),
          _c__]];
     caml_call1(Core[253], _c$_);
    }
    var level_index = [0, 0];
    for(;;){
     var
      _df_ = level_index[1],
      r$0 = caml_check_bound(x_135[5], _df_)[1 + _df_];
     if(! caml_call2(symbol$18, key$0, r$0[10])) break;
     level_index[1]++;
    }
    var
     level_index$0 = level_index[1],
     level = caml_check_bound(x_135[5], level_index$0)[1 + level_index$0],
     _dg_ = caml_call2(symbol$15, key$0, level[9]),
     _dh_ = _dg_ ? caml_call2(symbol$16, key$0, level[10]) : _dg_;
    if(1 - _dh_){
     var
      _da_ =
        [0,
         [1,
          [0, _ay_, [0, sexp_of_t$9(function(param){return _ax_;}, level), 0]]],
         0],
      _db_ = [0, [1, [0, _az_, [0, caml_call1(sexp_of_t$7, key$0), 0]]], _da_],
      _dc_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Priority_queue_add_elt_key$0),
          _db_]];
     caml_call1(Core[253], _dc_);
    }
    level[8] = level[8] + 1 | 0;
    caml_call4
     (Tuple_pool[36][33], pool$0, to_add, Tuple_pool[36][2][6], level_index$0);
    var
     slot$0 = slot(level, key$0),
     slots = level[11],
     first = caml_check_bound(slots, slot$0)[1 + slot$0];
    if(caml_call1(is_null, first)){
     caml_check_bound(slots, slot$0)[1 + slot$0] = to_add;
     return link(pool$0, to_add, to_add);
    }
    var prev$0 = prev(pool$0, first);
    link(pool$0, prev$0, to_add);
    return link(pool$0, to_add, first);
   }
   function internal_add_elt(t, elt){
    var key$0 = key(t[2], elt);
    if(caml_call2(symbol$19, key$0, t[4])){t[3] = elt; t[4] = key$0;}
    add_elt(t, elt);
    t[1] = t[1] + 1 | 0;
    return 0;
   }
   function ensure_valid_key(t, key){
    var
     _c6_ = caml_call2(symbol$19, key, min_allowed_key$1(t)),
     _c7_ = _c6_ || caml_call2(symbol$18, key, max_allowed_key$1(t));
    if(! _c7_) return _c7_;
    var
     _c2_ =
       [0,
        [1, [0, _aA_, [0, caml_call1(sexp_of_t$7, max_allowed_key$1(t)), 0]]],
        0],
     _c3_ =
       [0,
        [1, [0, _aB_, [0, caml_call1(sexp_of_t$7, min_allowed_key$1(t)), 0]]],
        _c2_],
     _c4_ = [0, [1, [0, _aC_, [0, caml_call1(sexp_of_t$7, key), 0]]], _c3_],
     _c5_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_add_at_interv),
         _c4_]];
    return caml_call1(Core[253], _c5_);
   }
   function internal_add(t, key, at, value){
    ensure_valid_key(t, key);
    if(caml_call1(is_full, t[2])) t[2] = caml_call2(grow, 0, t[2]);
    var
     pool = t[2],
     _c0_ = caml_call1(null$1, 0),
     _c1_ = caml_call1(null$1, 0),
     elt =
       caml_call7(Tuple_pool[36][21], pool, key, at, value, -1, _c1_, _c0_);
    internal_add_elt(t, elt);
    return elt;
   }
   function internal_remove(t, elt){
    var pool = t[2], t2 = t[3];
    if(caml_call2(Tuple_pool[36][3][7], elt, t2))
     t[3] = caml_call1(null$1, 0);
    t[1] = t[1] - 1 | 0;
    var
     _cW_ = level_index(pool, elt),
     level = caml_check_bound(t[5], _cW_)[1 + _cW_];
    level[8] = level[8] - 1 | 0;
    var
     slots = level[11],
     slot$0 = slot(level, key(pool, elt)),
     first = caml_check_bound(slots, slot$0)[1 + slot$0],
     _cX_ = next(pool, elt);
    if(caml_call2(Core[246], elt, _cX_)){
     var _cY_ = caml_call1(null$1, 0);
     caml_check_bound(slots, slot$0)[1 + slot$0] = _cY_;
     return;
    }
    if(caml_call2(Core[246], elt, first)){
     var _cZ_ = next(pool, elt);
     caml_check_bound(slots, slot$0)[1 + slot$0] = _cZ_;
    }
    var _cU_ = next(pool, elt);
    set_next(pool, prev(pool, elt), _cU_);
    var _cV_ = prev(pool, elt);
    return set_prev(pool, next(pool, elt), _cV_);
   }
   var
    _aD_ =
      [0,
       _w_,
       sexp_of_t$7,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$3,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator$0,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       [0,
        [0, _t_[9], _t_[10], _t_[11]],
        Map$0[2],
        Map$0[3],
        Map$0[4],
        Map$0[5],
        Map$0[6],
        Map$0[7],
        Map$0[8],
        Map$0[9],
        Map$0[10],
        Map$0[11],
        Map$0[12],
        Map$0[13],
        Map$0[14],
        Map$0[15],
        Map$0[16],
        Map$0[17],
        Map$0[18],
        Map$0[19],
        Map$0[20],
        Map$0[21],
        Map$0[22],
        Map$0[23],
        Map$0[24],
        Map$0[25],
        Map$0[26],
        Map$0[27],
        Map$0[28],
        Map$0[29],
        Map$0[30],
        Map$0[31],
        Map$0[32],
        Map$0[33],
        Map$0[34],
        Map$0[35],
        Map$0[36],
        Map$0[37],
        Map$0[38],
        Map$0[39],
        Map$0[40],
        Map$0[41],
        Map$0[42],
        Map$0[43],
        Map$0[44],
        Map$0[45],
        Map$0[46],
        Map$0[47],
        Map$0[48],
        Map$0[49],
        Map$0[50],
        Map$0[51],
        Map$0[52],
        Map$0[53],
        Map$0[54],
        Map$0[55],
        Map$0[56],
        Map$0[57],
        Map$0[58],
        Map$0[59],
        Map$0[60],
        Map$0[61],
        Map$0[62],
        Map$0[63],
        Map$0[64],
        Map$0[65],
        Map$0[66],
        Map$0[67],
        Map$0[68],
        Map$0[69],
        Map$0[70],
        Map$0[71],
        Map$0[72],
        Map$0[73],
        Map$0[74],
        Map$0[75],
        Map$0[76],
        Map$0[77],
        Map$0[78],
        Map$0[79],
        Map$0[80],
        Map$0[81],
        Map$0[82],
        Map$0[83],
        Map$0[84],
        Map$0[85],
        Map$0[86],
        Map$0[87],
        Map$0[88],
        Map$0[89],
        Map$0[90],
        Map$0[91],
        Map$0[92],
        Map$0[93],
        Map$0[94],
        Map$0[95],
        Map$0[96],
        Map$0[97],
        Map$0[98],
        Map$0[99],
        Map$0[100],
        Map$0[101],
        Map$0[102],
        Map$0[103],
        Map$0[104],
        Map$0[105],
        Map$0[106],
        Map$0[107]],
       [0,
        [0, _s_[1], _s_[2], _s_[11]],
        Set$0[2],
        Set$0[3],
        Set$0[4],
        Set$0[5],
        Set$0[6],
        Set$0[7],
        Set$0[8],
        Set$0[9],
        Set$0[10],
        Set$0[11],
        Set$0[12],
        Set$0[13],
        Set$0[14],
        Set$0[15],
        Set$0[16],
        Set$0[17],
        Set$0[18],
        Set$0[19],
        Set$0[20],
        Set$0[21],
        Set$0[22],
        Set$0[23],
        Set$0[24],
        Set$0[25],
        Set$0[26],
        Set$0[27],
        Set$0[28],
        Set$0[29],
        Set$0[30],
        Set$0[31],
        Set$0[32],
        Set$0[33],
        Set$0[34],
        Set$0[35],
        Set$0[36],
        Set$0[37],
        Set$0[38],
        Set$0[39],
        Set$0[40],
        Set$0[41],
        Set$0[42],
        Set$0[43],
        Set$0[44],
        Set$0[45],
        Set$0[46],
        Set$0[47],
        Set$0[48],
        Set$0[49],
        Set$0[50],
        Set$0[51],
        Set$0[52],
        Set$0[53],
        Set$0[54],
        Set$0[55],
        Set$0[56],
        Set$0[57],
        Set$0[58],
        Set$0[59],
        Set$0[60],
        Set$0[61],
        Set$0[62],
        Set$0[63],
        Set$0[64],
        Set$0[65],
        Set$0[66],
        Set$0[67],
        Set$0[68],
        Set$0[69],
        Set$0[70],
        Set$0[71],
        Set$0[72],
        Set$0[73],
        Set$0[74],
        Set$0[75]],
       compare$2,
       hash_fold_t,
       hash,
       hashable,
       [0,
        Table[1],
        Table[2],
        Table[3],
        Table[4],
        Table[5],
        Table[6],
        Table[7],
        Table[8],
        Table[9],
        Table[10],
        Table[11],
        Table[12],
        Table[13],
        Table[14],
        Table[15],
        Table[16],
        Table[17],
        Table[18],
        Table[19],
        Table[20],
        Table[21],
        Table[22],
        Table[23],
        Table[24],
        Table[25],
        Table[26],
        Table[27],
        Table[28],
        Table[29],
        Table[30],
        Table[31],
        Table[32],
        Table[33],
        Table[34],
        Table[35],
        Table[36],
        Table[37],
        Table[38],
        Table[39],
        Table[40],
        Table[41],
        Table[42],
        Table[43],
        Table[44],
        Table[45],
        Table[46],
        Table[47],
        Table[48],
        Table[49],
        Table[50],
        Table[51],
        Table[52],
        Table[53],
        Table[54],
        Table[55],
        Table[56],
        Table[57],
        Table[58],
        Table[59],
        Table[60],
        Table[61],
        Table[62],
        Table[63],
        Table[64],
        Table[65],
        Table[66],
        Table[67],
        Table[68],
        Table[69],
        Table[70],
        Table[71],
        Table[72],
        Table[73],
        Table[74],
        Table[75],
        Table[76],
        Table[77],
        Table[78],
        Table[79],
        Table[80],
        Table[81],
        Table[82],
        Table[83],
        Table[84]],
       [0,
        Hash_set[1],
        Hash_set[2],
        Hash_set[3],
        Hash_set[4],
        Hash_set[5],
        Hash_set[6],
        Hash_set[7]],
       Hash_queue,
       max$0,
       min$0,
       zero$1,
       one$1,
       min_value$0,
       max_value$0,
       of_int63$0,
       to_int63$0,
       of_int$1,
       to_int_exn$0,
       add,
       sub,
       diff,
       succ$0,
       pred$0,
       rem],
    min_interval_num = _aD_[31];
   function priority_queue(r){return r[7];}
   function max_allowed_alarm_time(r){return r[6];}
   function set_max_allowed_alarm_time(r, v){r[6] = v; return 0;}
   function now_interval_num_start(r){return r[5];}
   function set_now_interval_num_start(r, v){r[5] = v; return 0;}
   function now(r){return r[4];}
   function set_now(r, v){r[4] = v; return 0;}
   function max_interval_num(r){return r[3];}
   function start(r){return r[2];}
   function config(r){return r[1];}
   var
    priority_queue$0 =
      [0,
       function(param){return 0;},
       cst_priority_queue,
       0,
       priority_queue,
       function(r, v){return [0, r[1], r[2], r[3], r[4], r[5], r[6], v];}],
    max_allowed_alarm_time$0 =
      [0,
       function(param){return 0;},
       cst_max_allowed_alarm_time,
       [0, set_max_allowed_alarm_time],
       max_allowed_alarm_time,
       function(r, v){return [0, r[1], r[2], r[3], r[4], r[5], v, r[7]];}],
    now_interval_num_start$0 =
      [0,
       function(param){return 0;},
       cst_now_interval_num_start,
       [0, set_now_interval_num_start],
       now_interval_num_start,
       function(r, v){return [0, r[1], r[2], r[3], r[4], v, r[6], r[7]];}],
    now$0 =
      [0,
       function(param){return 0;},
       cst_now,
       [0, set_now],
       now,
       function(r, v){return [0, r[1], r[2], r[3], v, r[5], r[6], r[7]];}],
    max_interval_num$0 =
      [0,
       function(param){return 0;},
       cst_max_interval_num,
       0,
       max_interval_num,
       function(r, v){return [0, r[1], r[2], v, r[4], r[5], r[6], r[7]];}],
    start$0 =
      [0,
       function(param){return 0;},
       cst_start,
       0,
       start,
       function(r, v){return [0, r[1], v, r[3], r[4], r[5], r[6], r[7]];}],
    config$0 =
      [0,
       function(param){return 0;},
       cst_config,
       0,
       config,
       function(r, v){return [0, v, r[2], r[3], r[4], r[5], r[6], r[7]];}],
    _x_ = [0, cst_timing_wheel_src_timing_wh, 653, 8],
    _y_ = [0, cst_timing_wheel_src_timing_wh, 651, 8],
    _z_ = [0, cst_timing_wheel_src_timing_wh, 648, 8],
    _A_ = [0, cst$0],
    _B_ = [0, cst_timing_wheel_src_timing_wh, 647, 23049, 23075],
    _N_ = [0, cst_levels],
    _O_ = [0, cst_elt_key_lower_bound],
    _P_ = [0, cst_min_elt],
    _Q_ = [0, cst_pool],
    _R_ = [0, cst_length],
    _X_ = [0, cst_timing_wheel_src_timing_wh, 969, 21],
    _Y_ = [0, cst_timing_wheel_src_timing_wh, 965, 21],
    _Z_ = [0, cst_timing_wheel_src_timing_wh, 961, 21],
    ___ = [0, cst_timing_wheel_src_timing_wh, 957, 21],
    _$_ = [0, cst_timing_wheel_src_timing_wh, 936, 15],
    _aa_ = [0, cst_timing_wheel_src_timing_wh, 928, 15],
    _ab_ = [0, cst_timing_wheel_src_timing_wh, 914, 15],
    _ac_ = [0, cst_timing_wheel_src_timing_wh, 906, 15],
    _ad_ = [0, cst_timing_wheel_src_timing_wh, 899, 36],
    _ae_ = [0, cst_timing_wheel_src_timing_wh, 898, 38],
    _af_ = [0, cst$0],
    _ag_ = [0, cst_timing_wheel_src_timing_wh, 895, 31577, 31603],
    _ah_ = [0, cst_timing_wheel_src_timing_wh, 997, 15],
    _ai_ = [0, cst_timing_wheel_src_timing_wh, 995, 13],
    _aj_ = [0, cst_timing_wheel_src_timing_wh, 991, 15],
    _ak_ = [0, cst_timing_wheel_src_timing_wh, 988, 13],
    _al_ = [0, cst_timing_wheel_src_timing_wh, 987, 13],
    _am_ = [0, cst_timing_wheel_src_timing_wh, 984, 15],
    _an_ = [0, cst_timing_wheel_src_timing_wh, 983, 15],
    _ao_ = [0, cst_timing_wheel_src_timing_wh, 977, 38],
    _ap_ = [0, cst_timing_wheel_src_timing_wh, 975, 6],
    _aq_ = [0, cst_timing_wheel_src_timing_wh, 974, 6],
    _ar_ = [0, cst$0],
    _as_ = [0, cst_timing_wheel_src_timing_wh, 972, 34918, 34942],
    _aE_ = [0, cst_value],
    _aF_ = [0, cst_at],
    _aG_ = [0, "alarms"],
    _aH_ = [0, cst_now],
    _aI_ = [0, cst_max_interval_num],
    _aJ_ = [0, cst_start],
    _aK_ = [0, cst_config],
    _aL_ = [0, cst$0],
    _aM_ = [0, cst_timing_wheel],
    cst_Timing_wheel_next_alarm_fi =
      "Timing_wheel.next_alarm_fires_at_exn of empty timing wheel",
    _aN_ = [0, cst$0],
    _aO_ = [0, cst_timing_wheel],
    cst_Timing_wheel_next_alarm_fi$0 =
      "Timing_wheel.next_alarm_fires_at_exn with all alarms in max interval",
    _aP_ = [0, "time"],
    cst_Timing_wheel_interval_num_ =
      "Timing_wheel.interval_num got time too far in the past",
    _aQ_ = [0, "min_interval_num"],
    _aR_ = [0, cst_interval_num],
    cst_Timing_wheel_interval_num_$0 =
      "Timing_wheel.interval_num_start got too small interval_num",
    _aS_ = [0, "t.max_interval_num"],
    _aT_ = [0, cst_interval_num],
    cst_Timing_wheel_interval_num_$1 =
      "Timing_wheel.interval_num_start got too large interval_num",
    _aU_ = [0, cst_timing_wheel_src_timing_wh, 1638, 11],
    _aV_ = [0, cst_timing_wheel_src_timing_wh, 1637, 11],
    _aW_ = [0, cst_timing_wheel_src_timing_wh, 1636, 11],
    _aX_ = [0, cst_timing_wheel_src_timing_wh, 1625, 11],
    _aY_ = [0, cst_timing_wheel_src_timing_wh, 1624, 11],
    _aZ_ = [0, cst_timing_wheel_src_timing_wh, 1662, 6],
    _a0_ = [0, cst_timing_wheel_src_timing_wh, 1658, 6],
    _a1_ = [0, cst_timing_wheel_src_timing_wh, 1654, 6],
    _a2_ = [0, cst$0],
    _a3_ = [0, cst_timing_wheel_src_timing_wh, 1618, 58357, 58379];
   function sexp_of_t_now(param, t){
    return caml_call1(Core_Time_ns_alternate_sexp[92], t[4]);
   }
   function alarm_precision$0(t){return alarm_precision(t[1]);}
   function at$0(tw, t){
    var p = tw[7], _cT_ = of_external_exn(p[2], t);
    return at(p[2], _cT_);
   }
   function value$0(tw, t){
    var p = tw[7], _cS_ = of_external_exn(p[2], t);
    return value(p[2], _cS_);
   }
   function interval_num(tw, t){
    var p = tw[7], _cR_ = of_external_exn(p[2], t);
    return key(p[2], _cR_);
   }
   function iter$0(t, f){var t$0 = t[7]; return internal_iter(t$0, f);}
   function compare$3(t1, t2){
    return caml_call2(Core_Time_ns_alternate_sexp[101], t1[1], t2[1]);
   }
   function sexp_of_t$10(sexp_of_a, t){
    var
     max_interval_num_167 = t[3],
     start_165 = t[2],
     config_163 = t[1],
     now_169 = t[4],
     r = [0, 0];
    iter$0
     (t,
      function(alarm){
       var _cQ_ = r[1], _cP_ = value$0(t, alarm);
       r[1] = [0, [0, at$0(t, alarm), _cP_], _cQ_];
       return 0;
      });
    var
     alarms_171 = caml_call2(Core_List[58], r[1], compare$3),
     arg_172 =
       caml_call2
        (Core[421],
         function(param){
          var
           value_159 = param[2],
           at_157 = param[1],
           arg_160 = caml_call1(sexp_of_a, value_159),
           bnds_156 = [0, [1, [0, _aE_, [0, arg_160, 0]]], 0],
           arg_158 = caml_call1(Core_Time_ns_alternate_sexp[92], at_157),
           bnds_156$0 = [0, [1, [0, _aF_, [0, arg_158, 0]]], bnds_156];
          return [1, bnds_156$0];
         },
         alarms_171),
     bnds_162 = [0, [1, [0, _aG_, [0, arg_172, 0]]], 0],
     arg_170 = caml_call1(Core_Time_ns_alternate_sexp[92], now_169),
     bnds_162$0 = [0, [1, [0, _aH_, [0, arg_170, 0]]], bnds_162],
     arg_168 = caml_call1(_aD_[2], max_interval_num_167),
     bnds_162$1 = [0, [1, [0, _aI_, [0, arg_168, 0]]], bnds_162$0],
     arg_166 = caml_call1(Core_Time_ns_alternate_sexp[92], start_165),
     bnds_162$2 = [0, [1, [0, _aJ_, [0, arg_166, 0]]], bnds_162$1],
     arg_164 = sexp_of_t$3(config_163),
     bnds_162$3 = [0, [1, [0, _aK_, [0, arg_164, 0]]], bnds_162$2];
    return [1, bnds_162$3];
   }
   function length$3(t){var r = t[7]; return r[1];}
   function is_empty$0(t){
    var _cO_ = length$3(t);
    return caml_call2(Core[90], _cO_, 0);
   }
   function pool$1(t){var r = t[7]; return r[2];}
   function interval_num_internal(time, alarm_precision){
    var
     _cM_ = caml_call1(Core_Time_ns_alternate_sexp[61], time),
     _cN_ = caml_call2(Core_Int63[48], _cM_, alarm_precision);
    return caml_call1(_aD_[35], _cN_);
   }
   function interval_num_unchecked(t, time){
    return interval_num_internal(time, t[1][1]);
   }
   function interval_num$0(t, time){
    if(caml_call2(Core_Time_ns_alternate_sexp[98], time, min_time)){
     var
      _cK_ =
        [0,
         [1,
          [0, _aP_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], time), 0]]],
         0],
      _cL_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_interval_num_),
          _cK_]];
     caml_call1(Core[253], _cL_);
    }
    return interval_num_unchecked(t, time);
   }
   function interval_num_start_unchecked(t, interval_num){
    var
     interval_num$0 = caml_call1(_aD_[36], interval_num),
     t$0 = t[1][1],
     _cJ_ = caml_call2(Core_Int63[47], interval_num$0, t$0);
    return caml_call1(Core_Time_ns_alternate_sexp[62], _cJ_);
   }
   function interval_num_start(t, interval_num){
    if(caml_call2(_aD_[7], interval_num, min_interval_num)){
     var
      _cD_ =
        [0, [1, [0, _aQ_, [0, caml_call1(_aD_[2], min_interval_num), 0]]], 0],
      _cE_ =
        [0, [1, [0, _aR_, [0, caml_call1(_aD_[2], interval_num), 0]]], _cD_],
      _cF_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_interval_num_$0),
          _cE_]];
     caml_call1(Core[253], _cF_);
    }
    if(caml_call2(_aD_[6], interval_num, t[3])){
     var
      _cG_ = [0, [1, [0, _aS_, [0, caml_call1(_aD_[2], t[3]), 0]]], 0],
      _cH_ =
        [0, [1, [0, _aT_, [0, caml_call1(_aD_[2], interval_num), 0]]], _cG_],
      _cI_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_interval_num_$1),
          _cH_]];
     caml_call1(Core[253], _cI_);
    }
    return interval_num_start_unchecked(t, interval_num);
   }
   function next_alarm_fires_at_internal(t, key){
    return interval_num_start(t, caml_call1(_aD_[42], key));
   }
   function next_alarm_fires_at(t){
    var elt = min_elt$1(t[7]);
    if(caml_call1(is_null, elt)) return 0;
    var key$0 = key(pool$1(t), elt);
    return caml_call2(_aD_[9], key$0, t[3])
            ? 0
            : [0, next_alarm_fires_at_internal(t, key$0)];
   }
   function next_alarm_fires_at_exn(x_174){
    var elt = min_elt$1(x_174[7]);
    if(caml_call1(is_null, elt)){
     var
      _cz_ =
        [0,
         [1,
          [0,
           _aM_,
           [0, sexp_of_t$10(function(param){return _aL_;}, x_174), 0]]],
         0],
      _cA_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_next_alarm_fi),
          _cz_]];
     caml_call1(Core[253], _cA_);
    }
    var key$0 = key(pool$1(x_174), elt);
    if(caml_call2(_aD_[9], key$0, x_174[3])){
     var
      _cB_ =
        [0,
         [1,
          [0,
           _aO_,
           [0, sexp_of_t$10(function(param){return _aN_;}, x_174), 0]]],
         0],
      _cC_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_next_alarm_fi$0),
          _cB_]];
     caml_call1(Core[253], _cC_);
    }
    return next_alarm_fires_at_internal(x_174, key$0);
   }
   function compute_max_allowed_alarm_time(t){
    var max_allowed_key = max_allowed_key$1(t[7]);
    if(caml_call2(_aD_[3], max_allowed_key, t[3])) return max_time;
    var
     _cv_ = Core_Time_ns[1][67],
     _cw_ = alarm_precision$0(t),
     _cx_ = caml_call2(Core_Time_ns[1][98], _cw_, _cv_),
     _cy_ = interval_num_start_unchecked(t, max_allowed_key);
    return caml_call2(Core_Time_ns_alternate_sexp[51], _cy_, _cx_);
   }
   function now_interval_num(t){return min_allowed_key$1(t[7]);}
   function max_allowed_alarm_interval_num(t){return interval_num$0(t, t[6]);}
   function interval_start(t, time){
    return interval_num_start_unchecked(t, interval_num$0(t, time));
   }
   function invariant$2(invariant_a, t){
    return caml_call4
            (Base_Invariant[1],
             _a3_,
             t,
             function(x_176){
              return sexp_of_t$10(function(param){return _a2_;}, x_176);
             },
             function(param){
              function check(f){return caml_call2(Base_Invariant[2], t, f);}
              var
               priority_queue_fun =
                 check
                  (function(t){
                    var pool = t[2];
                    return caml_call4
                            (Base_Invariant[1],
                             _as_,
                             t,
                             function(x_130){
                              function of_a_089(param){return _ar_;}
                              var
                               length_091 = x_130[1],
                               pool_093 = x_130[2],
                               min_elt_095 = x_130[3],
                               elt_key_lower_bound_097 = x_130[4],
                               levels_099 = x_130[5],
                               arg_100 =
                                 caml_call2
                                  (Core[288],
                                   function(_cu_){return sexp_of_t$9(of_a_089, _cu_);},
                                   levels_099),
                               bnds_090 = [0, [1, [0, _N_, [0, arg_100, 0]]], 0],
                               arg_098 = caml_call1(sexp_of_t$7, elt_key_lower_bound_097),
                               bnds_090$0 = [0, [1, [0, _O_, [0, arg_098, 0]]], bnds_090],
                               arg_096 = sexp_of_t$8(of_a_089, min_elt_095),
                               bnds_090$1 = [0, [1, [0, _P_, [0, arg_096, 0]]], bnds_090$0],
                               arg_094 =
                                 caml_call2
                                  (Tuple_pool[36][4],
                                   function(_ct_){return sexp_of_pool_slots(of_a_089, _ct_);},
                                   pool_093),
                               bnds_090$2 = [0, [1, [0, _Q_, [0, arg_094, 0]]], bnds_090$1],
                               arg_092 = caml_call1(Core[356], length_091),
                               bnds_090$3 = [0, [1, [0, _R_, [0, arg_092, 0]]], bnds_090$2];
                              return [1, bnds_090$3];
                             },
                             function(param){
                              function check(f){
                               return caml_call2(Base_Invariant[2], t, f);
                              }
                              if(! caml_call2(symbol$15, min_allowed_key$1(t), zero$1))
                               throw caml_maybe_attach_backtrace
                                      ([0, Assert_failure, _aq_], 1);
                              var _cb_ = min_allowed_key$1(t);
                              if(! caml_call2(symbol$15, max_allowed_key$1(t), _cb_))
                               throw caml_maybe_attach_backtrace
                                      ([0, Assert_failure, _ap_], 1);
                              var
                               levels_fun =
                                 check
                                  (function(levels){
                                    var _cg_ = num_levels(t);
                                    if(caml_call2(Core[91], _cg_, 0))
                                     return caml_call2
                                             (Core_Array[58],
                                              levels,
                                              function(level_index$0, level){
                                               if(! caml_call2(Core[90], level_index$0, level[1]))
                                                throw caml_maybe_attach_backtrace
                                                       ([0, Assert_failure, _ah_], 1);
                                               caml_call4
                                                (Base_Invariant[1],
                                                 _ag_,
                                                 level,
                                                 function(x_119){
                                                  return sexp_of_t$9(function(param){return _af_;}, x_119);
                                                 },
                                                 function(param){
                                                  function check(f){
                                                   return caml_call2(Base_Invariant[2], level, f);
                                                  }
                                                  var
                                                   slots_fun =
                                                     check
                                                      (function(slots){
                                                        return caml_call2
                                                                (Core_Array[22],
                                                                 slots,
                                                                 function(elt){
                                                                  var _cl_ = 1 - caml_call1(is_null, elt);
                                                                  return _cl_
                                                                          ? (caml_call4
                                                                             (Base_Invariant[1],
                                                                              _B_,
                                                                              elt,
                                                                              function(x_062){
                                                                               return sexp_of_t$8(function(param){return _A_;}, x_062);
                                                                              },
                                                                              function(param){
                                                                               if(! is_valid(pool, elt))
                                                                                throw caml_maybe_attach_backtrace
                                                                                       ([0, Assert_failure, _z_], 1);
                                                                               caml_call1(invariant_a, value(pool, elt));
                                                                               var n = next(pool, elt);
                                                                               if(! caml_call1(is_null, n)){
                                                                                var _cn_ = prev(pool, n);
                                                                                if(! caml_call2(Tuple_pool[36][3][7], elt, _cn_))
                                                                                 throw caml_maybe_attach_backtrace
                                                                                        ([0, Assert_failure, _y_], 1);
                                                                               }
                                                                               var p = prev(pool, elt);
                                                                               if(! caml_call1(is_null, p)){
                                                                                var _cm_ = next(pool, p);
                                                                                if(! caml_call2(Tuple_pool[36][3][7], elt, _cm_))
                                                                                 throw caml_maybe_attach_backtrace
                                                                                        ([0, Assert_failure, _x_], 1);
                                                                               }
                                                                               return 0;
                                                                              }),
                                                                            iter
                                                                             (pool,
                                                                              elt,
                                                                              function(elt){
                                                                               var _co_ = level[9];
                                                                               if(! caml_call2(symbol$15, key(pool, elt), _co_))
                                                                                throw caml_maybe_attach_backtrace
                                                                                       ([0, Assert_failure, ___], 1);
                                                                               var _cp_ = level[10];
                                                                               if(! caml_call2(symbol$16, key(pool, elt), _cp_))
                                                                                throw caml_maybe_attach_backtrace
                                                                                       ([0, Assert_failure, _Z_], 1);
                                                                               var _cq_ = t[4];
                                                                               if(! caml_call2(symbol$15, key(pool, elt), _cq_))
                                                                                throw caml_maybe_attach_backtrace
                                                                                       ([0, Assert_failure, _Y_], 1);
                                                                               var _cr_ = level[1], _cs_ = level_index(pool, elt);
                                                                               if(caml_call2(Core[90], _cs_, _cr_))
                                                                                return caml_call1(invariant_a, value(pool, elt));
                                                                               throw caml_maybe_attach_backtrace
                                                                                      ([0, Assert_failure, _X_], 1);
                                                                              }))
                                                                          : _cl_;
                                                                 });
                                                       }),
                                                   max_allowed_key_fun =
                                                     check
                                                      (function(max_allowed_key){
                                                        var expect = add_clamp_to_max(level[9], level[7]);
                                                        function comparator(a_128, b_129){
                                                         return caml_call2(compare$2, a_128, b_129);
                                                        }
                                                        return caml_call8
                                                                (Ppx_assert_lib_Runtime[3],
                                                                 pos,
                                                                 sexp_of_t$7,
                                                                 comparator,
                                                                 0,
                                                                 0,
                                                                 0,
                                                                 expect,
                                                                 max_allowed_key);
                                                       }),
                                                   min_allowed_key_fun =
                                                     check
                                                      (function(min_allowed_key){
                                                        if(! caml_call2(symbol$15, min_allowed_key, zero$1))
                                                         throw caml_maybe_attach_backtrace
                                                                ([0, Assert_failure, _$_], 1);
                                                        var
                                                         _ck_ = caml_call2(symbol$19, min_allowed_key, max_value$0);
                                                        if(! _ck_) return _ck_;
                                                        var
                                                         got = caml_call2(rem, min_allowed_key, level[5]),
                                                         expect = _w_[24],
                                                         sexpifier = _w_[1];
                                                        function comparator(a_126, b_127){
                                                         return caml_call2(_w_[9], a_126, b_127);
                                                        }
                                                        return caml_call8
                                                                (Ppx_assert_lib_Runtime[3],
                                                                 pos$0,
                                                                 sexpifier,
                                                                 comparator,
                                                                 0,
                                                                 0,
                                                                 0,
                                                                 expect,
                                                                 got);
                                                       }),
                                                   length_fun =
                                                     check
                                                      (function(length){
                                                        var
                                                         _cj_ =
                                                           caml_call3
                                                            (Core_Array[23],
                                                             level[11],
                                                             0,
                                                             function(n, first){
                                                              if(caml_call1(is_null, first)) return n;
                                                              var r = [0, 0], current = [0, first], continue$0 = [0, 1];
                                                              for(;;){
                                                               if(! continue$0[1]) return n + r[1] | 0;
                                                               r[1]++;
                                                               var next$0 = next(pool, current[1]);
                                                               if(caml_call2(Core[246], next$0, first))
                                                                continue$0[1] = 0;
                                                               else
                                                                current[1] = next$0;
                                                              }
                                                             });
                                                        if(caml_call2(Core[90], length, _cj_)) return 0;
                                                        throw caml_maybe_attach_backtrace
                                                               ([0, Assert_failure, _aa_], 1);
                                                       }),
                                                   expect = compute_diff_max_min_allowed_k(level[2], level[4]),
                                                   diff_max_min_allowed_key_fun =
                                                     check
                                                      (function(eta){
                                                        var sexpifier = _w_[1];
                                                        function comparator(a_124, b_125){
                                                         return caml_call2(_w_[9], a_124, b_125);
                                                        }
                                                        return caml_call8
                                                                (Ppx_assert_lib_Runtime[3],
                                                                 pos$1,
                                                                 sexpifier,
                                                                 comparator,
                                                                 0,
                                                                 0,
                                                                 0,
                                                                 expect,
                                                                 eta);
                                                       }),
                                                   min_key_in_same_slot_mask_fun =
                                                     check
                                                      (function(min_key_in_same_slot_mask){
                                                        if
                                                         (caml_call2
                                                           (equal$1, min_key_in_same_slot_mask, create$1(level[4])))
                                                         return 0;
                                                        throw caml_maybe_attach_backtrace
                                                               ([0, Assert_failure, _ab_], 1);
                                                       }),
                                                   keys_per_slot_fun =
                                                     check
                                                      (function(keys_per_slot){
                                                        var
                                                         num_bits = level[4],
                                                         expect = pow2(num_bits),
                                                         sexpifier = _w_[1];
                                                        function comparator(a_122, b_123){
                                                         return caml_call2(_w_[9], a_122, b_123);
                                                        }
                                                        return caml_call8
                                                                (Ppx_assert_lib_Runtime[3],
                                                                 pos$2,
                                                                 sexpifier,
                                                                 comparator,
                                                                 0,
                                                                 0,
                                                                 0,
                                                                 expect,
                                                                 keys_per_slot);
                                                       }),
                                                   bits_per_slot_fun =
                                                     check
                                                      (function(bits_per_slot){
                                                        if(caml_call2(symbol, bits_per_slot, zero)) return 0;
                                                        throw caml_maybe_attach_backtrace
                                                               ([0, Assert_failure, _ac_], 1);
                                                       }),
                                                   expect$0 = create$0(level[2]),
                                                   slots_mask_fun =
                                                     check
                                                      (function(eta){
                                                        function comparator(a_120, b_121){
                                                         return caml_call2(compare$0, a_120, b_121);
                                                        }
                                                        return caml_call8
                                                                (Ppx_assert_lib_Runtime[3],
                                                                 pos$3,
                                                                 sexp_of_t$4,
                                                                 comparator,
                                                                 0,
                                                                 0,
                                                                 0,
                                                                 expect$0,
                                                                 eta);
                                                       }),
                                                   bits_fun =
                                                     check
                                                      (function(bits){
                                                        if(caml_call2(symbol$1, bits, zero)) return 0;
                                                        throw caml_maybe_attach_backtrace
                                                               ([0, Assert_failure, _ad_], 1);
                                                       }),
                                                   index_fun =
                                                     check
                                                      (function(index){
                                                        if(caml_call2(Core[88], index, 0)) return 0;
                                                        throw caml_maybe_attach_backtrace
                                                               ([0, Assert_failure, _ae_], 1);
                                                       });
                                                  caml_call1(index_fun, index$0);
                                                  caml_call1(bits_fun, bits$0);
                                                  caml_call1(slots_mask_fun, slots_mask$0);
                                                  caml_call1(bits_per_slot_fun, bits_per_slot$0);
                                                  caml_call1(keys_per_slot_fun, keys_per_slot$0);
                                                  caml_call1
                                                   (min_key_in_same_slot_mask_fun, min_key_in_same_slot_mask$0);
                                                  caml_call1
                                                   (diff_max_min_allowed_key_fun, diff_max_min_allowed_key$0);
                                                  caml_call1(length_fun, length$0);
                                                  caml_call1(min_allowed_key_fun, min_allowed_key$0);
                                                  caml_call1(max_allowed_key_fun, max_allowed_key$0);
                                                  return caml_call1(slots_fun, slots$0);
                                                 });
                                               var _ch_ = caml_call2(Core[91], level_index$0, 0);
                                               if(! _ch_) return _ch_;
                                               var
                                                _ci_ = level_index$0 - 1 | 0,
                                                prev_level = caml_check_bound(levels, _ci_)[1 + _ci_],
                                                got$0 = level[5],
                                                expect = caml_call1(_w_[33], prev_level[7]),
                                                sexpifier = _w_[1];
                                               function comparator(a_131, b_132){
                                                return caml_call2(_w_[9], a_131, b_132);
                                               }
                                               caml_call8
                                                (Ppx_assert_lib_Runtime[3],
                                                 pos$4,
                                                 sexpifier,
                                                 comparator,
                                                 0,
                                                 0,
                                                 0,
                                                 expect,
                                                 got$0);
                                               var
                                                got = level[9],
                                                expect$0 = compute_min_allowed_key(level, prev_level[10]);
                                               function comparator$0(a_133, b_134){
                                                return caml_call2(compare$2, a_133, b_134);
                                               }
                                               return caml_call8
                                                       (Ppx_assert_lib_Runtime[3],
                                                        pos$5,
                                                        sexp_of_t$7,
                                                        comparator$0,
                                                        0,
                                                        0,
                                                        0,
                                                        expect$0,
                                                        got);
                                              });
                                    throw caml_maybe_attach_backtrace
                                           ([0, Assert_failure, _ai_], 1);
                                   }),
                               elt_key_lower_bound_fun =
                                 check
                                  (function(elt_key_lower_bound){
                                    if
                                     (!
                                      caml_call2
                                       (symbol$15, elt_key_lower_bound, min_allowed_key$1(t)))
                                     throw caml_maybe_attach_backtrace
                                            ([0, Assert_failure, _al_], 1);
                                    if
                                     (!
                                      caml_call2
                                       (symbol$16, elt_key_lower_bound, max_allowed_key$1(t)))
                                     throw caml_maybe_attach_backtrace
                                            ([0, Assert_failure, _ak_], 1);
                                    var _cf_ = 1 - caml_call1(is_null, t[3]);
                                    if(! _cf_) return _cf_;
                                    if
                                     (caml_call2(equal$3, elt_key_lower_bound, key(t[2], t[3])))
                                     return 0;
                                    throw caml_maybe_attach_backtrace
                                           ([0, Assert_failure, _aj_], 1);
                                   }),
                               min_elt_fun =
                                 check
                                  (function(elt){
                                    var _cd_ = 1 - caml_call1(is_null, elt);
                                    if(! _cd_) return _cd_;
                                    if(! is_valid(t[2], elt))
                                     throw caml_maybe_attach_backtrace
                                            ([0, Assert_failure, _an_], 1);
                                    var _ce_ = key(t[2], elt);
                                    if(caml_call2(equal$3, t[4], _ce_)) return 0;
                                    throw caml_maybe_attach_backtrace
                                           ([0, Assert_failure, _am_], 1);
                                   }),
                               pool_fun =
                                 check
                                  (function(t){
                                    return caml_call2
                                            (Tuple_pool[36][5], function(_cc_){return 0;}, t);
                                   }),
                               length_fun =
                                 check
                                  (function(length){
                                    if(caml_call2(Core[88], length, 0)) return 0;
                                    throw caml_maybe_attach_backtrace
                                           ([0, Assert_failure, _ao_], 1);
                                   });
                              caml_call1(length_fun, length$2);
                              caml_call1(pool_fun, pool$0);
                              caml_call1(min_elt_fun, min_elt$0);
                              caml_call1(elt_key_lower_bound_fun, elt_key_lower_bound$0);
                              return caml_call1(levels_fun, levels$0);
                             });
                   }),
               max_allowed_alarm_time_fun =
                 check
                  (function(max_allowed_alarm_time){
                    var
                     expect = compute_max_allowed_alarm_time(t),
                     sexpifier = Core_Time_ns_alternate_sexp[92];
                    function comparator(a_183, b_184){
                     return caml_call2
                             (Core_Time_ns_alternate_sexp[101], a_183, b_184);
                    }
                    return caml_call8
                            (Ppx_assert_lib_Runtime[3],
                             pos$6,
                             sexpifier,
                             comparator,
                             0,
                             0,
                             0,
                             expect,
                             max_allowed_alarm_time);
                   }),
               now_interval_num_start_fun =
                 check
                  (function(now_interval_num_start){
                    var
                     expect = interval_num_start(t, now_interval_num(t)),
                     sexpifier = Core_Time_ns_alternate_sexp[92];
                    function comparator(a_181, b_182){
                     return caml_call2
                             (Core_Time_ns_alternate_sexp[101], a_181, b_182);
                    }
                    return caml_call8
                            (Ppx_assert_lib_Runtime[3],
                             pos$7,
                             sexpifier,
                             comparator,
                             0,
                             0,
                             0,
                             expect,
                             now_interval_num_start);
                   }),
               now_fun =
                 check
                  (function(now){
                    if(! caml_call2(Core_Time_ns_alternate_sexp[94], now, t[2]))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _aW_], 1);
                    if
                     (!
                      caml_call2(Core_Time_ns_alternate_sexp[95], now, max_time))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _aV_], 1);
                    var
                     _b$_ = min_allowed_key$1(t[7]),
                     _ca_ = interval_num$0(t, t[4]);
                    if(caml_call2(_aD_[9], _ca_, _b$_)) return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _aU_], 1);
                   }),
               max_interval_num_fun =
                 check
                  (function(max_interval_num){
                    var got = interval_num$0(t, max_time), sexpifier = _aD_[2];
                    function comparator(a_177, b_178){
                     return caml_call2(_aD_[22], a_177, b_178);
                    }
                    caml_call8
                     (Ppx_assert_lib_Runtime[3],
                      pos$8,
                      sexpifier,
                      comparator,
                      0,
                      0,
                      0,
                      max_interval_num,
                      got);
                    var
                     got$0 =
                       interval_num$0(t, interval_num_start(t, max_interval_num)),
                     sexpifier$0 = _aD_[2];
                    function comparator$0(a_179, b_180){
                     return caml_call2(_aD_[22], a_179, b_180);
                    }
                    return caml_call8
                            (Ppx_assert_lib_Runtime[3],
                             pos$9,
                             sexpifier$0,
                             comparator$0,
                             0,
                             0,
                             0,
                             max_interval_num,
                             got$0);
                   }),
               start_fun =
                 check
                  (function(start){
                    if
                     (!
                      caml_call2(Core_Time_ns_alternate_sexp[94], start, min_time))
                     throw caml_maybe_attach_backtrace
                            ([0, Assert_failure, _aY_], 1);
                    if
                     (caml_call2
                       (Core_Time_ns_alternate_sexp[95], start, max_time))
                     return 0;
                    throw caml_maybe_attach_backtrace
                           ([0, Assert_failure, _aX_], 1);
                   }),
               config_fun = check(invariant$1);
              caml_call1(config_fun, config$0);
              caml_call1(start_fun, start$0);
              caml_call1(max_interval_num_fun, max_interval_num$0);
              caml_call1(now_fun, now$0);
              caml_call1(now_interval_num_start_fun, now_interval_num_start$0);
              caml_call1(max_allowed_alarm_time_fun, max_allowed_alarm_time$0);
              caml_call1(priority_queue_fun, priority_queue$0);
              return iter$0
                      (t,
                       function(alarm){
                        var
                         _b4_ = interval_num$0(t, at$0(t, alarm)),
                         _b5_ = interval_num(t, alarm);
                        if(! caml_call2(_aD_[9], _b5_, _b4_))
                         throw caml_maybe_attach_backtrace
                                ([0, Assert_failure, _a1_], 1);
                        var
                         _b6_ = interval_start(t, t[4]),
                         _b7_ = interval_start(t, at$0(t, alarm));
                        if
                         (! caml_call2(Core_Time_ns_alternate_sexp[94], _b7_, _b6_))
                         throw caml_maybe_attach_backtrace
                                ([0, Assert_failure, _a0_], 1);
                        var
                         _b8_ = alarm_precision$0(t),
                         _b9_ =
                           caml_call2(Core_Time_ns_alternate_sexp[54], t[4], _b8_),
                         _b__ = at$0(t, alarm);
                        if(caml_call2(Core_Time_ns_alternate_sexp[97], _b__, _b9_))
                         return 0;
                        throw caml_maybe_attach_backtrace
                               ([0, Assert_failure, _aZ_], 1);
                       });
             });
   }
   var
    debug = 0,
    _a4_ = [0, cst_start],
    cst_Timing_wheel_create_got_st =
      "Timing_wheel.create got start before the epoch",
    _a5_ = [0, cst_timing_wheel_src_timing_wh, 1707, 53],
    _a6_ = [0, cst_max_allowed_alarm_time],
    _a7_ = [0, cst_at],
    cst_Timing_wheel_cannot_schedu =
      "Timing_wheel cannot schedule alarm that far in the future",
    _a8_ = [0, cst_now_interval_num_start],
    _a9_ = [0, cst_at],
    cst_Timing_wheel_cannot_schedu$0 =
      "Timing_wheel cannot schedule alarm before start of current interval",
    cst_Timing_wheel_cannot_resche =
      "Timing_wheel cannot reschedule alarm not in timing wheel",
    _a__ = [0, cst$0],
    _a$_ = [0, cst_timing_wheel],
    cst_Timing_wheel_min_alarm_int =
      "Timing_wheel.min_alarm_interval_num_exn of empty timing_wheel",
    _ba_ = [0, cst$0],
    _bb_ = [0, cst_timing_wheel],
    cst_Timing_wheel_max_alarm_tim = cst_Timing_wheel_max_alarm_tim$1,
    _bc_ = [0, cst$0],
    _bd_ = [0, cst_timing_wheel],
    cst_Timing_wheel_max_alarm_tim$0 = cst_Timing_wheel_max_alarm_tim$1;
   function advance_clock(t$0, to, handle_removed){
    var _b2_ = caml_call2(Core_Time_ns_alternate_sexp[97], to, t$0[4]);
    if(_b2_){
     t$0[4] = to;
     var t_min_allowed_key = interval_num_unchecked(t$0, to);
     t$0[5] = interval_num_start_unchecked(t$0, t_min_allowed_key);
     var t$1 = t$0[7];
     if(caml_call2(symbol$16, t_min_allowed_key, min_allowed_key$1(t$1)))
      var match = 0;
     else{
      var
       level_index = [0, 0],
       result = [0, 1],
       prev_level_max_allowed_key = [0, caml_call1(pred$0, t_min_allowed_key)],
       levels = t$1[5],
       num_levels$0 = num_levels(t$1);
      for(;;){
       if(! caml_call2(Core[92], level_index[1], num_levels$0)){
        if(caml_call2(symbol$18, t_min_allowed_key, t$1[4])){
         t$1[3] = caml_call1(null$1, 0);
         t$1[4] = min_allowed_key$1(t$1);
        }
        var match = result[1];
        break;
       }
       var
        _b1_ = level_index[1],
        level = caml_check_bound(levels, _b1_)[1 + _b1_],
        min_allowed_key_before = level[9],
        prev_level_max_allowed_key$0 = prev_level_max_allowed_key[1],
        desired_min_allowed_key =
          compute_min_allowed_key(level, prev_level_max_allowed_key$0),
        level_min_allowed_key =
          min_key_in_same_slot
           (level,
            caml_call2
             (min$0,
              desired_min_allowed_key,
              caml_call2(max$0, level[9], t$1[4]))),
        level_min_allowed_key$0 = [0, level_min_allowed_key],
        slot$0 = [0, slot(level, level_min_allowed_key$0[1])],
        keys_per_slot = level[5],
        slots = level[11];
       for(;;){
        if
         (!
          caml_call2
           (symbol$19, level_min_allowed_key$0[1], desired_min_allowed_key))
         break;
        if(caml_call2(Core[90], level[8], 0))
         level_min_allowed_key$0[1] = desired_min_allowed_key;
        else{
         var
          _bY_ = slot$0[1],
          first = caml_check_bound(slots, _bY_)[1 + _bY_];
         if(1 - caml_call1(is_null, first)){
          var _bZ_ = caml_call1(null$1, 0), _b0_ = slot$0[1];
          caml_check_bound(slots, _b0_)[1 + _b0_] = _bZ_;
          var pool = t$1[2], current = [0, first], continue$0 = [0, 1];
          for(;;){
           if(! continue$0[1]) break;
           var next$0 = next(pool, current[1]);
           level[8] = level[8] - 1 | 0;
           if(caml_call2(symbol$15, key(pool, current[1]), t_min_allowed_key))
            add_elt(t$1, current[1]);
           else{
            t$1[1] = t$1[1] - 1 | 0;
            var t = current[1];
            caml_call1(handle_removed, t);
            caml_call2(free, pool, current[1]);
           }
           if(caml_call2(Core[246], next$0, first))
            continue$0[1] = 0;
           else
            current[1] = next$0;
          }
         }
         slot$0[1] = next_slot(level, slot$0[1]);
         level_min_allowed_key$0[1] =
          add_clamp_to_max(level_min_allowed_key$0[1], keys_per_slot);
        }
       }
       level[9] = desired_min_allowed_key;
       level[10] = add_clamp_to_max(desired_min_allowed_key, level[7]);
       if(caml_call2(equal$3, level[9], min_allowed_key_before)){level_index[1] = num_levels$0; result[1] = 0;}
       else{
        level_index[1] = level_index[1] + 1 | 0;
        prev_level_max_allowed_key[1] = level[10];
       }
      }
     }
     if(match){t$0[6] = compute_max_allowed_alarm_time(t$0); return 0;}
     var _b3_ = debug;
    }
    else
     var _b3_ = _b2_;
    return _b3_;
   }
   function create$2(config, start){
    if
     (caml_call2
       (Core_Time_ns_alternate_sexp[98],
        start,
        Core_Time_ns_alternate_sexp[43])){
     var
      _bO_ =
        [0,
         [1,
          [0,
           _a4_,
           [0, caml_call1(Core_Time_ns_alternate_sexp[92], start), 0]]],
         0],
      _bP_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_create_got_st),
          _bO_]];
     caml_call1(Core[253], _bP_);
    }
    var
     level_bits = config[2],
     capacity$0 = config[3],
     levels =
       caml_call3
         (Core_List[95],
          level_bits,
          [0, zero, zero$1, 0],
          function(index, param, level_bits){
           var
            levels = param[3],
            max_level_min_allowed_key = param[2],
            bits_per_slot = param[1],
            keys_per_slot = pow2(bits_per_slot),
            diff_max_min_allowed_key =
              compute_diff_max_min_allowed_k(level_bits, bits_per_slot),
            min_key_in_same_slot_mask = create$1(bits_per_slot),
            min_allowed_key =
              caml_call2
               (bit_and, max_level_min_allowed_key, min_key_in_same_slot_mask),
            max_allowed_key =
              add_clamp_to_max(min_allowed_key, diff_max_min_allowed_key),
            _bS_ = caml_call1(null$1, 0),
            _bT_ = pow2(level_bits),
            _bU_ = caml_call1(Core_Int63[5], _bT_),
            _bV_ = caml_call2(Core_Array[38], _bU_, _bS_),
            level =
              [0,
               index,
               level_bits,
               create$0(level_bits),
               bits_per_slot,
               keys_per_slot,
               min_key_in_same_slot_mask,
               diff_max_min_allowed_key,
               0,
               min_allowed_key,
               max_allowed_key,
               _bV_],
            _bW_ = [0, level, levels],
            _bX_ =
              caml_call2(symbol$17, max_allowed_key, max_value$0)
               ? max_value$0
               : caml_call1(succ$0, max_allowed_key);
           return [0, symbol$2(level_bits, bits_per_slot), _bX_, _bW_];
          })
        [3],
     _bL_ = caml_call1(Core_Array[90], levels),
     _bM_ = caml_call1(null$1, 0);
    if(capacity$0)
     var sth = capacity$0[1], capacity = sth;
    else
     var capacity = 1;
    var
     _bN_ =
       [0,
        0,
        caml_call2(Tuple_pool[36][35], Tuple_pool[36][1][22], capacity),
        _bM_,
        zero$1,
        _bL_],
     _bQ_ = Core_Time_ns_alternate_sexp[46],
     _bR_ = Core_Time_ns_alternate_sexp[46],
     t =
       [0,
        config,
        start,
        interval_num_internal(max_time, config[1]),
        _bR_,
        _bQ_,
        max_time,
        _bN_];
    t[6] = compute_max_allowed_alarm_time(t);
    advance_clock
     (t,
      start,
      function(param){
       throw caml_maybe_attach_backtrace([0, Assert_failure, _a5_], 1);
      });
    return t;
   }
   function add_at_interval_num(t, at, value){
    var
     _bK_ = interval_num_start(t, at),
     t$0 = internal_add(t[7], at, _bK_, value);
    return t$0;
   }
   function ensure_can_schedule_alarm(t, at){
    if(caml_call2(Core_Time_ns_alternate_sexp[97], at, t[6])){
     var
      _bD_ =
        [0,
         [1,
          [0, _a6_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], t[6]), 0]]],
         0],
      _bE_ =
        [0,
         [1,
          [0, _a7_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], at), 0]]],
         _bD_],
      _bF_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_cannot_schedu),
          _bE_]];
     caml_call1(Core[253], _bF_);
    }
    var _bJ_ = caml_call2(Core_Time_ns_alternate_sexp[98], at, t[5]);
    if(! _bJ_) return _bJ_;
    var
     _bG_ =
       [0,
        [1,
         [0, _a8_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], t[5]), 0]]],
        0],
     _bH_ =
       [0,
        [1,
         [0, _a9_, [0, caml_call1(Core_Time_ns_alternate_sexp[92], at), 0]]],
        _bG_],
     _bI_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_cannot_schedu$0),
         _bH_]];
    return caml_call1(Core[253], _bI_);
   }
   function add$0(t, at, value){
    ensure_can_schedule_alarm(t, at);
    var
     _bC_ = interval_num_unchecked(t, at),
     t$0 = internal_add(t[7], _bC_, at, value);
    return t$0;
   }
   function remove(t, alarm){
    var t$0 = t[7], pool = t$0[2], elt = of_external_exn(pool, alarm);
    internal_remove(t$0, elt);
    return caml_call2(free, pool, elt);
   }
   function clear(t){
    var t$0 = t[7], _bt_ = 1 - is_empty(t$0);
    if(_bt_){
     t$0[1] = 0;
     var
      pool = t$0[2],
      free_elt = function(elt){return caml_call2(free, pool, elt);},
      levels = t$0[5],
      _bv_ = levels.length - 2 | 0,
      _bu_ = 0;
     if(_bv_ >= 0){
      var level_index = _bu_;
      for(;;){
       var level = caml_check_bound(levels, level_index)[1 + level_index];
       if(caml_call2(Core[91], level[8], 0)){
        level[8] = 0;
        var slots = level[11], _by_ = slots.length - 2 | 0, _bx_ = 0;
        if(_by_ >= 0){
         var slot_index = _bx_;
         for(;;){
          var elt = caml_check_bound(slots, slot_index)[1 + slot_index];
          if(1 - caml_call1(is_null, elt)){
           iter(pool, elt, free_elt);
           var _bA_ = caml_call1(null$1, 0);
           caml_check_bound(slots, slot_index)[1 + slot_index] = _bA_;
          }
          var _bB_ = slot_index + 1 | 0;
          if(_by_ === slot_index) break;
          slot_index = _bB_;
         }
        }
       }
       var _bz_ = level_index + 1 | 0;
       if(_bv_ === level_index) break;
       level_index = _bz_;
      }
     }
     var _bw_ = 0;
    }
    else
     var _bw_ = _bt_;
    return _bw_;
   }
   function mem(t, alarm){var t$0 = t[7]; return is_valid(t$0[2], alarm);}
   function reschedule_gen(t, alarm, key, at){
    if(1 - mem(t, alarm)) caml_call1(Core[6], cst_Timing_wheel_cannot_resche);
    ensure_can_schedule_alarm(t, at);
    var t$0 = t[7];
    ensure_valid_key(t$0, key);
    var pool = t$0[2], elt = of_external_exn(pool, alarm);
    internal_remove(t$0, elt);
    caml_call4(Tuple_pool[36][33], pool, elt, Tuple_pool[36][2][3], key);
    caml_call4(Tuple_pool[36][33], pool, elt, Tuple_pool[36][2][4], at);
    return internal_add_elt(t$0, elt);
   }
   function reschedule(t, alarm, at){
    return reschedule_gen(t, alarm, interval_num_unchecked(t, at), at);
   }
   function reschedule_at_interval_num(t, alarm, at){
    return reschedule_gen(t, alarm, at, interval_num_start(t, at));
   }
   function min_alarm_interval_num(t){
    var elt = min_elt$1(t[7]);
    return caml_call1(is_null, elt) ? 0 : [0, key(pool$1(t), elt)];
   }
   function min_alarm_interval_num_exn(x_185){
    var elt = min_elt$1(x_185[7]);
    if(! caml_call1(is_null, elt)) return key(pool$1(x_185), elt);
    var
     _br_ =
       [0,
        [1,
         [0, _a$_, [0, sexp_of_t$10(function(param){return _a__;}, x_185), 0]]],
        0],
     _bs_ =
       [1,
        [0,
         caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_min_alarm_int),
         _br_]];
    return caml_call1(Core[253], _bs_);
   }
   function max_alarm_time_in_list(t, first){
    var
     pool = pool$1(t),
     with_key = key(pool, first),
     max_alarm_time = [0, Core_Time_ns_alternate_sexp[43]],
     current = [0, first],
     continue$0 = [0, 1];
    for(;;){
     if(! continue$0[1]) return max_alarm_time[1];
     var next$0 = next(pool, current[1]);
     if(caml_call2(equal$3, key(pool, current[1]), with_key)){
      var _bp_ = max_alarm_time[1], _bq_ = at(pool, current[1]);
      max_alarm_time[1] =
       caml_call2(Core_Time_ns_alternate_sexp[103], _bq_, _bp_);
     }
     if(caml_call2(Core[246], next$0, first))
      continue$0[1] = 0;
     else
      current[1] = next$0;
    }
   }
   function min_alarm_time_in_list(t, first){
    var
     pool = pool$1(t),
     with_key = key(pool, first),
     min_alarm_time = [0, Core_Time_ns_alternate_sexp[45]],
     current = [0, first],
     continue$0 = [0, 1];
    for(;;){
     if(! continue$0[1]) return min_alarm_time[1];
     var next$0 = next(pool, current[1]);
     if(caml_call2(equal$3, key(pool, current[1]), with_key)){
      var _bn_ = min_alarm_time[1], _bo_ = at(pool, current[1]);
      min_alarm_time[1] =
       caml_call2(Core_Time_ns_alternate_sexp[102], _bo_, _bn_);
     }
     if(caml_call2(Core[246], next$0, first))
      continue$0[1] = 0;
     else
      current[1] = next$0;
    }
   }
   function max_alarm_time_in_min_interval(t){
    var elt = min_elt$1(t[7]);
    return caml_call1(is_null, elt) ? 0 : [0, max_alarm_time_in_list(t, elt)];
   }
   function min_alarm_time_in_min_interval(t){
    var elt = min_elt$1(t[7]);
    return caml_call1(is_null, elt) ? 0 : [0, min_alarm_time_in_list(t, elt)];
   }
   function max_alarm_time_in_min_interval$0(x_186){
    var elt = min_elt$1(x_186[7]);
    if(caml_call1(is_null, elt)){
     var
      _bl_ =
        [0,
         [1,
          [0,
           _bb_,
           [0, sexp_of_t$10(function(param){return _ba_;}, x_186), 0]]],
         0],
      _bm_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_max_alarm_tim),
          _bl_]];
     caml_call1(Core[253], _bm_);
    }
    return max_alarm_time_in_list(x_186, elt);
   }
   function min_alarm_time_in_min_interval$0(x_187){
    var elt = min_elt$1(x_187[7]);
    if(caml_call1(is_null, elt)){
     var
      _bj_ =
        [0,
         [1,
          [0,
           _bd_,
           [0, sexp_of_t$10(function(param){return _bc_;}, x_187), 0]]],
         0],
      _bk_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Timing_wheel_max_alarm_tim$0),
          _bj_]];
     caml_call1(Core[253], _bk_);
    }
    return min_alarm_time_in_list(x_187, elt);
   }
   function fire_past_alarms(t, handle_fired){
    var
     now = t[4],
     key = now_interval_num(t),
     t$0 = t[7],
     level = caml_check_bound(t$0[5], 0)[1],
     _be_ = caml_call2(Core[91], level[8], 0);
    if(_be_){
     var
      slot$0 = slot(level, key),
      slots = level[11],
      pool = t$0[2],
      first = [0, caml_check_bound(slots, slot$0)[1 + slot$0]],
      _bf_ = 1 - caml_call1(is_null, first[1]);
     if(_bf_){
      var current = [0, first[1]], continue$0 = [0, 1];
      for(;;){
       if(! continue$0[1]){var _bh_ = 0; break;}
       var elt = current[1], next$0 = next(pool, elt);
       if(caml_call2(Core[246], next$0, first[1]))
        continue$0[1] = 0;
       else
        current[1] = next$0;
       var _bg_ = at(pool, elt);
       if(caml_call2(Core_Time_ns_alternate_sexp[95], _bg_, now)){
        caml_call1(handle_fired, elt);
        internal_remove(t$0, elt);
        caml_call2(free, pool, elt);
        first[1] = caml_check_bound(slots, slot$0)[1 + slot$0];
       }
      }
     }
     else
      var _bh_ = _bf_;
     var _bi_ = _bh_;
    }
    else
     var _bi_ = _be_;
    return _bi_;
   }
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_timing_wheel);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Timing_wheel);
   var
    Timing_wheel =
      [0,
       [0,
        compare,
        sexp_of_t$1,
        equal$0,
        of_span_floor_pow2_ns,
        of_span_floor_pow2_ns,
        to_sexpable,
        0,
        46,
        about_one_microsecond,
        20,
        30,
        mul,
        div,
        _k_],
       sexp_of_t$10,
       sexp_of_t_now,
       _aD_,
       [0, sexp_of_t$8, null$0, at$0, interval_num, value$0],
       invariant$2,
       [0,
        t_of_sexp$0,
        sexp_of_t$0,
        invariant$0,
        max_num_bits,
        create_exn,
        level_bits_default,
        num_bits],
       [0,
        t_of_sexp$2,
        sexp_of_t$3,
        invariant$1,
        create,
        alarm_precision,
        level_bits,
        durations,
        microsecond_precision],
       create$2,
       alarm_precision$0,
       now,
       start,
       is_empty$0,
       length$3,
       iter$0,
       interval_num$0,
       now_interval_num,
       interval_num_start,
       interval_start,
       advance_clock,
       fire_past_alarms,
       max_allowed_alarm_time,
       now_interval_num,
       max_allowed_alarm_interval_num,
       add$0,
       add_at_interval_num,
       mem,
       remove,
       reschedule,
       reschedule_at_interval_num,
       clear,
       min_alarm_interval_num,
       min_alarm_interval_num_exn,
       max_alarm_time_in_min_interval,
       min_alarm_time_in_min_interval,
       max_alarm_time_in_min_interval$0,
       min_alarm_time_in_min_interval$0,
       next_alarm_fires_at,
       next_alarm_fires_at_exn,
       [0, max_time, interval_num_internal, [0, invariant, zero]]];
   runtime.caml_register_global(219, Timing_wheel, cst_Timing_wheel);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
