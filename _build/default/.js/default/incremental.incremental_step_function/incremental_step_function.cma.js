// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1

//# unitInfo: Provides: Incremental_step_function
//# unitInfo: Requires: Base__Field, Core, Core__List, Core__Sequence, Core__Time_ns, Expect_test_collector, Ppx_bench_lib__Benchmark_accumulator, Ppx_inline_test_lib__Runtime, Ppx_module_timer_runtime, Sexplib0__Sexp_conv
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Incremental_step_function = "Incremental_step_function",
    cst_incremental_step_function = "incremental_step_function",
    cst_steps = "steps";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Core_Sequence = global_data.Core__Sequence,
    Core = global_data.Core,
    Core_List = global_data.Core__List,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv;
   global_data.Base__Field;
   var
    Ppx_module_timer_runtime = global_data.Ppx_module_timer_runtime,
    Ppx_bench_lib_Benchmark_accumu =
      global_data.Ppx_bench_lib__Benchmark_accumulator,
    Expect_test_collector = global_data.Expect_test_collector,
    Ppx_inline_test_lib_Runtime = global_data.Ppx_inline_test_lib__Runtime,
    Core_Time_ns = global_data.Core__Time_ns;
   caml_call1(Ppx_module_timer_runtime[4], cst_Incremental_step_function);
   caml_call1
    (Ppx_bench_lib_Benchmark_accumu[1][1], cst_incremental_step_function);
   caml_call1
    (Expect_test_collector[5][1],
     "step_function/src/incremental_step_function.ml");
   caml_call2
    (Ppx_inline_test_lib_Runtime[2], cst_incremental_step_function, cst);
   var
    symbol = Core_Time_ns[19],
    compare = Core_Time_ns[22],
    sexp_of_t = Core_Time_ns[25][4],
    _a_ = [0, cst_steps],
    _b_ = [0, "init"],
    _c_ = [0, cst_steps],
    cst_Step_function_create_exn_g =
      "[Step_function.create_exn] got unsorted times";
   function steps(r){return r[2];}
   function init(r){return r[1];}
   function sexp_of_t$0(of_a_001, param){
    var
     steps_005 = param[2],
     init_003 = param[1],
     arg_006 =
       caml_call2
        (Core_Sequence[11],
         function(param){
          var
           arg1_008 = param[2],
           arg0_007 = param[1],
           res0_009 = caml_call1(sexp_of_t, arg0_007),
           res1_010 = caml_call1(of_a_001, arg1_008);
          return [1, [0, res0_009, [0, res1_010, 0]]];
         },
         steps_005),
     bnds_002 = [0, [1, [0, _a_, [0, arg_006, 0]]], 0],
     arg_004 = caml_call1(of_a_001, init_003),
     bnds_002$0 = [0, [1, [0, _b_, [0, arg_004, 0]]], bnds_002];
    return [1, bnds_002$0];
   }
   function invariant(invariant_a, param){
    var init = param[1];
    return caml_call1(invariant_a, init);
   }
   function value(t$0, at){
    var steps$1 = t$0[2], init$1 = t$0[1], init = init$1, steps = steps$1;
    for(;;){
     var match = caml_call1(Core_Sequence[47], steps);
     if(! match) return init;
     var
      _h_ = match[1],
      steps$0 = _h_[2],
      match$0 = _h_[1],
      init$0 = match$0[2],
      t = match$0[1];
     if(caml_call2(symbol, at, t)) return init;
     init = init$0;
     steps = steps$0;
    }
   }
   function constant(init){return [0, init, Core_Sequence[46]];}
   function create_exn(init, steps){
    if
     (1
      -
       caml_call2
        (Core_List[140],
         steps,
         function(param, _f_){
          var time2 = _f_[1], time1 = param[1];
          return caml_call2(compare, time1, time2);
         })){
     var
      x_011 = caml_call2(Core_List[72], steps, function(_g_){return _g_[1];}),
      _d_ =
        [0, [1, [0, _c_, [0, caml_call2(Core[421], sexp_of_t, x_011), 0]]], 0],
      _e_ =
        [1,
         [0,
          caml_call1(Sexplib0_Sexp_conv[7], cst_Step_function_create_exn_g),
          _d_]];
     caml_call1(Core[253], _e_);
    }
    return [0, init, caml_call1(Core_Sequence[109], steps)];
   }
   function create_from_sequence(init, steps){return [0, init, steps];}
   caml_call1(Ppx_inline_test_lib_Runtime[3], cst_incremental_step_function);
   caml_call1(Expect_test_collector[5][2], 0);
   caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2], 0);
   caml_call1(Ppx_module_timer_runtime[5], cst_Incremental_step_function);
   var
    Incremental_step_function =
      [0,
       sexp_of_t$0,
       invariant,
       init,
       steps,
       value,
       constant,
       create_exn,
       create_from_sequence];
   runtime.caml_register_global
    (24, Incremental_step_function, cst_Incremental_step_function);
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJpbmNyZW1lbnRhbF9zdGVwX2Z1bmN0aW9uLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJzZXhwX29mX3QiLCJzdGVwcyIsInIiLCJpbml0Iiwic2V4cF9vZl90JDAiLCJvZl9hXzAwMSIsInN0ZXBzXzAwNSIsImluaXRfMDAzIiwiYXJnXzAwNiIsImFyZzFfMDA4IiwiYXJnMF8wMDciLCJyZXMwXzAwOSIsInJlczFfMDEwIiwiYm5kc18wMDIiLCJhcmdfMDA0IiwiYm5kc18wMDIkMCIsImludmFyaWFudCIsImludmFyaWFudF9hIiwidmFsdWUiLCJ0JDAiLCJhdCIsInN0ZXBzJDEiLCJpbml0JDEiLCJzdGVwcyQwIiwiaW5pdCQwIiwidCIsImNvbnN0YW50IiwiY3JlYXRlX2V4biIsInRpbWUyIiwidGltZTEiLCJ4XzAxMSIsImNyZWF0ZV9mcm9tX3NlcXVlbmNlIl0sInNvdXJjZXMiOlsiL1VzZXJzL2phY29iemlmZi8ub3BhbS9kaXktaGF6ZWxudXQvbGliL2luY3JlbWVudGFsL2luY3JlbWVudGFsX3N0ZXBfZnVuY3Rpb24vaW5jcmVtZW50YWxfc3RlcF9mdW5jdGlvbi5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztHOzs7OztHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBS01BOzs7Ozs7R0FHTixTQUVJQyxNQUFBQyxHQUFBLE9BQUFBLEtBQUs7WUFETEMsS0FBQUQsR0FBQSxPQUFBQSxLQUFJO1lBRFJFLFlBQUtDO0lBQUw7S0FFSUM7S0FEQUM7S0FDQUM7T0FBQTs7OztXQUFTQztXQUFBQztXQUFBQyxzQkFMUFgsV0FLT1U7V0FBQUUsc0JBRlJQLFVBRVFJO3lCQUFBRSxjQUFBQzs7U0FBVE47S0FGSk8sZ0NBRUlMO0tBREFNLFVBQUEsV0FEQ1QsVUFDREU7S0FESlEsa0NBQ0lELGVBREpEO0lBQUEsV0FBQUU7R0FJNEI7WUFFeEJDLFVBQVVDO1FBQWNkO0lBQW9CLE9BQUEsV0FBbENjLGFBQWNkOztZQVN4QmUsTUFBTUMsS0FBR0M7SUFBSyxJQVBVQyxVQU9sQkYsUUFQYUcsU0FPYkgsUUFQYWhCLE9BQUFtQixRQUFLckIsUUFBQW9CO0lBQzFCO0tBQU0sWUFBQSw4QkFEb0JwQjtpQkFFaEIsT0FGV0U7OztNQUFLb0I7O01BQUxDO01BR1pDO0tBQ0osR0FBQSxtQkFHTUwsSUFKRkssSUFDb0IsT0FKUnRCO0tBQUFBLE9BQUFxQjtLQUFLdkIsUUFBQXNCOztHQU91QjtZQUMvQ0csU0FBU3ZCLE1BQU8sV0FBUEEseUJBQXVDO1lBRWhEd0IsV0FBWXhCLE1BQU1GO0lBQ3BCOzs7T0FDSzs7U0FGZUE7O1VBRWdCLElBQWlCMkIsZ0JBQVhDO1VBQ2xDLE9BQUEsb0JBRGtDQSxPQUFXRDtTQUNqQjtLQUtwQjtNQUEyQkUsUUFBM0IsMEJBUkk3QixxQjs7bURBckJoQkQsV0E2QnVDOEI7Ozs7OztLQUh6Qzs7SUFJRixXQVRjM0IsTUFTRSwrQkFUSUY7R0FTdUI7WUFHekM4QixxQkFBc0I1QixNQUFNRixPQUFRLFdBQWRFLE1BQU1GLE9BQXVCOzs7Ozs7OztPQTlCdkRHO09BTUlZO09BTEFiO09BQ0FGO09BYUFpQjtPQUNBUTtPQUVBQztPQVlBSTs7OztFIiwic291cmNlc0NvbnRlbnQiOlsib3BlbiEgQ29yZVxuXG5tb2R1bGUgVGltZV9ucyA9IHN0cnVjdFxuICBpbmNsdWRlIFRpbWVfbnNcblxuICBsZXQgc2V4cF9vZl90ID0gVGltZV9ucy5BbHRlcm5hdGVfc2V4cC5zZXhwX29mX3RcbmVuZFxuXG50eXBlICdhIHQgPVxuICB7IGluaXQgOiAnYVxuICA7IHN0ZXBzIDogKFRpbWVfbnMudCAqICdhKSBTZXF1ZW5jZS50XG4gIH1cbltAQGRlcml2aW5nIGZpZWxkcywgc2V4cF9vZl1cblxubGV0IGludmFyaWFudCBpbnZhcmlhbnRfYSB7IGluaXQ7IHN0ZXBzID0gXyB9ID0gaW52YXJpYW50X2EgaW5pdFxuXG5sZXQgcmVjIHZhbHVlX2ludGVybmFsIGluaXQgc3RlcHMgfmF0ID1cbiAgbWF0Y2ggU2VxdWVuY2UubmV4dCBzdGVwcyB3aXRoXG4gIHwgTm9uZSAtPiBpbml0XG4gIHwgU29tZSAoKHQsIGEpLCBzdGVwcykgLT5cbiAgICBpZiBUaW1lX25zLiggPCApIGF0IHQgdGhlbiBpbml0IGVsc2UgdmFsdWVfaW50ZXJuYWwgYSBzdGVwcyB+YXRcbjs7XG5cbmxldCB2YWx1ZSB0IH5hdCA9IHZhbHVlX2ludGVybmFsIHQuaW5pdCB0LnN0ZXBzIH5hdFxubGV0IGNvbnN0YW50IGluaXQgPSB7IGluaXQ7IHN0ZXBzID0gU2VxdWVuY2UuZW1wdHkgfVxuXG5sZXQgY3JlYXRlX2V4biB+aW5pdCB+c3RlcHMgPVxuICBpZiBub3RcbiAgICAgICAoTGlzdC5pc19zb3J0ZWQgc3RlcHMgfmNvbXBhcmU6KGZ1biAodGltZTEsIF8pICh0aW1lMiwgXykgLT5cbiAgICAgICAgICBUaW1lX25zLmNvbXBhcmUgdGltZTEgdGltZTIpKVxuICB0aGVuXG4gICAgcmFpc2Vfc1xuICAgICAgWyVtZXNzYWdlXG4gICAgICAgIFwiW1N0ZXBfZnVuY3Rpb24uY3JlYXRlX2V4bl0gZ290IHVuc29ydGVkIHRpbWVzXCJcbiAgICAgICAgICB+c3RlcHM6KHN0ZXBzIHw+IExpc3QubWFwIH5mOmZzdCA6IFRpbWVfbnMudCBsaXN0KV07XG4gIHsgaW5pdDsgc3RlcHMgPSBzdGVwcyB8PiBTZXF1ZW5jZS5vZl9saXN0IH1cbjs7XG5cbmxldCBjcmVhdGVfZnJvbV9zZXF1ZW5jZSB+aW5pdCB+c3RlcHMgPSB7IGluaXQ7IHN0ZXBzIH1cbiJdfQ==
