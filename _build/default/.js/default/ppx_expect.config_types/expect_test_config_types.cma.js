// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1

//# unitInfo: Provides: Expect_test_config_types__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Expect_test_config_types = [0];
   runtime.caml_register_global
    (0, Expect_test_config_types, "Expect_test_config_types__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Expect_test_config_types__Expect_test_config_types_intf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Upon_unreleasable_issue = [0],
    Expect_test_config_types_Expec = [0, Upon_unreleasable_issue];
   runtime.caml_register_global
    (0,
     Expect_test_config_types_Expec,
     "Expect_test_config_types__Expect_test_config_types_intf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Expect_test_config_types
//# unitInfo: Requires: Expect_test_config_types__Expect_test_config_types_intf, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Printf = global_data.Stdlib__Printf,
    equal = runtime.caml_equal,
    cst_CR = "CR ",
    _a_ =
      [0,
       [11,
        "\n(* ",
        [2,
         0,
         [11,
          "expect_test_collector: This test expectation appears to contain a backtrace.\n   This is strongly discouraged as backtraces are fragile.\n   Please change this test to not include a backtrace. *)\n\n",
          0]]],
       "\n(* %sexpect_test_collector: This test expectation appears to contain a backtrace.\n   This is strongly discouraged as backtraces are fragile.\n   Please change this test to not include a backtrace. *)\n\n"];
   function comment_prefix(param){return 15023 <= param ? cst_CR : cst;}
   function message_when_expectation_conta(t){
    var _b_ = comment_prefix(t);
    return caml_call2(Stdlib_Printf[4], _a_, _b_);
   }
   var
    Upon_unreleasable_issue =
      [0, equal, comment_prefix, message_when_expectation_conta],
    Expect_test_config_types = [0, Upon_unreleasable_issue];
   runtime.caml_register_global
    (4, Expect_test_config_types, "Expect_test_config_types");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJleHBlY3RfdGVzdF9jb25maWdfdHlwZXMuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbImVxdWFsIiwiY29tbWVudF9wcmVmaXgiLCJtZXNzYWdlX3doZW5fZXhwZWN0YXRpb25fY29udGEiLCJ0Il0sInNvdXJjZXMiOlsiL1VzZXJzL2phY29iemlmZi8ub3BhbS9kaXktaGF6ZWxudXQvbGliL3BweF9leHBlY3QvY29uZmlnX3R5cGVzL2V4cGVjdF90ZXN0X2NvbmZpZ190eXBlc19pbnRmLm1sIiwiL1VzZXJzL2phY29iemlmZi8ub3BhbS9kaXktaGF6ZWxudXQvbGliL3BweF9leHBlY3QvY29uZmlnX3R5cGVzL2V4cGVjdF90ZXN0X2NvbmZpZ190eXBlcy5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7RTs7Ozs7OztHQUFpQzs7SUFBQTs7Ozs7OztFOzs7Ozs7Ozs7Rzs7Ozs7Ozs7O0lDUTNCQTs7Ozs7Ozs7Ozs7O1lBRUFDLHNCQUFpQixxQ0FFbUI7WUFHcENDLCtCQUE0Q0M7SUFRNUMsVUFiQUYsZUFLNENFO0lBUTVDLE9BQUE7R0FBa0I7R0FsQlM7SUFBQTtVQUczQkgsT0FFQUMsZ0JBS0FDOzs7OztFIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlIFVwb25fdW5yZWxlYXNhYmxlX2lzc3VlID0gc3RydWN0XG4gIHR5cGUgdCA9XG4gICAgWyBgQ1IgKCoqIExlYXZlcyBhIENSLCBzbyB0aGF0IGZlYXR1cmVzIGNhbm5vdCBiZSByZWxlYXNlZC4gKilcbiAgICB8IGBXYXJuaW5nX2Zvcl9jb2xsZWN0b3JfdGVzdGluZyAoKiogT25seSBmb3IgcHB4X2V4cGVjdCB0ZXN0aW5nOyBkbyBub3QgdXNlLiAqKVxuICAgIF1cbmVuZFxuXG5tb2R1bGUgdHlwZSBTID0gc2lnXG4gIG1vZHVsZSBJT19ydW4gOiBzaWdcbiAgICB0eXBlICdhIHRcbiAgZW5kXG5cbiAgKCoqIEEgbm93LWxlZ2FjeSBtb25hZC4gVGhpcyBzaWduYXR1cmUgdXNlZCB0byBkZWNsYXJlIGEgW2ZsdXNoXSBmdW5jdGlvbi5cbiAgICAgIFtbJWV4cGVjdC5vdXRwdXRdXSBzdGlsbCByZXR1cm5zIHRoaXMgdHlwZS4gTm8gbWVhbmluZ2Z1bCBtb25hZGljIHdvcmsgaXMgZG9uZS4gKilcbiAgbW9kdWxlIElPX2ZsdXNoIDogc2lnXG4gICAgdHlwZSAnYSB0XG5cbiAgICB2YWwgcmV0dXJuIDogJ2EgLT4gJ2EgdFxuICAgIHZhbCBiaW5kIDogJ2EgdCAtPiBmOignYSAtPiAnYiB0KSAtPiAnYiB0XG4gICAgdmFsIHRvX3J1biA6ICdhIHQgLT4gJ2EgSU9fcnVuLnRcbiAgZW5kXG5cbiAgKCoqIFJ1biBhbiBJTyBvcGVyYXRpb24gdW50aWwgY29tcGxldGlvbiAqKVxuICB2YWwgcnVuIDogKHVuaXQgLT4gdW5pdCBJT19ydW4udCkgLT4gdW5pdFxuXG4gICgqKiBTeW5jaHJvbm91cyBjaGVjayB0aGF0IHRoZXJlIGlzIG5vIHBlbmRpbmcgb3V0cHV0IG9uIGZpbGUgZGVzY3JpcHRpb24gMC4gV2l0aCBhc3luYyxcbiAgICAgIHRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IG9uIHRoZSByaHMgb2YgYSBbSU8uYmluZCAoZmx1c2ggKCkpIC4uLl0gdGhlIG91dHB1dCBpc1xuICAgICAgY29tcGxldGVseSBmbHVzaGVkLCB0aGF0J3Mgd2h5IHdlIG5lZWQgdGhpcy4gKilcbiAgdmFsIGZsdXNoZWQgOiB1bml0IC0+IGJvb2xcblxuICAoKiogW3Nhbml0aXplXSBjYW4gYmUgdXNlZCB0byBtYXAgYWxsIG91dHB1dCBzdHJpbmdzLCBlLmcuIGZvciBjbGVhbnNpbmcuICopXG4gIHZhbCBzYW5pdGl6ZSA6IHN0cmluZyAtPiBzdHJpbmdcblxuXG4gICgqKiBbdXBvbl91bnJlbGVhc2FibGVfaXNzdWVdIHNwZWNpZmllcyBob3cgdG8gZGVhbCB3aXRoIG91dHB1dCB0aGF0IHNob3VsZCBub3QgYmVcbiAgICAgIHJlbGVhc2VkIGV2ZW4gaWYgaXQgaXMgYWNjZXB0ZWQgKGUuZy4gYmFja3RyYWNlcykuIFRoZSBkZWZhdWx0IGlzIFtgQ1JdLiAgKilcbiAgdmFsIHVwb25fdW5yZWxlYXNhYmxlX2lzc3VlIDogVXBvbl91bnJlbGVhc2FibGVfaXNzdWUudFxuZW5kXG5cbigqKiBDb25maWd1cmF0aW9uIGZvciBydW5uaW5nIGV4cGVjdCB0ZXN0cyAqKVxubW9kdWxlIHR5cGUgRXhwZWN0X3Rlc3RfY29uZmlnX3R5cGVzID0gc2lnXG4gICgqKiBUbyBjb25maWd1cmUgZXhwZWN0X3Rlc3QsIGFkZCB0aGUgZm9sbG93aW5nIGF0IHRoZSB0b3Agb2YgeW91ciAubWwgZmlsZSwgb3IgaW4gc29tZVxuICAgICAgaW1wb3J0Lm1sOlxuXG4gICAgICB7W1xuICAgICAgICBtb2R1bGUgRXhwZWN0X3Rlc3RfY29uZmlnID0gc3RydWN0XG4gICAgICAgICAgaW5jbHVkZSBFeHBlY3RfdGVzdF9jb25maWdcbiAgICAgICAgICBsZXQgcHJlX3JlZGlyZWN0X2hvb2sgKCkgPSAuLi5cbiAgICAgICAgZW5kXG4gICAgICBdfVxuXG4gICAgICBOb3RlIHRoYXQgc2luY2UgYWxsIGV4cGVjdCB0ZXN0IGFyZSBhbHNvIGlubGluZSB0ZXN0cywgdGhlIGlubGluZSB0ZXN0IGNvbmZpZ3VyYXRpb25cbiAgICAgIGFsc28gYXBwbGllcyB0byBhbGwgZXhwZWN0IHRlc3QuXG4gICopXG5cbiAgbW9kdWxlIFVwb25fdW5yZWxlYXNhYmxlX2lzc3VlIDogc2lnXG4gICAgaW5jbHVkZSBtb2R1bGUgdHlwZSBvZiBVcG9uX3VucmVsZWFzYWJsZV9pc3N1ZVxuXG4gICAgdmFsIGVxdWFsIDogdCAtPiB0IC0+IGJvb2xcbiAgICB2YWwgY29tbWVudF9wcmVmaXggOiB0IC0+IHN0cmluZ1xuXG4gICAgKCoqIE1lc3NhZ2UgdG8gcHJpbnQgd2hlbiBhbiBleHBlY3RhdGlvbiBjb250YWlucyBhIGJhY2t0cmFjZSAqKVxuICAgIHZhbCBtZXNzYWdlX3doZW5fZXhwZWN0YXRpb25fY29udGFpbnNfYmFja3RyYWNlIDogdCAtPiBzdHJpbmdcbiAgZW5kXG5cbiAgbW9kdWxlIHR5cGUgUyA9IFNcbmVuZFxuIiwibW9kdWxlIHR5cGUgUyA9IEV4cGVjdF90ZXN0X2NvbmZpZ190eXBlc19pbnRmLlNcblxubW9kdWxlIHR5cGUgRXhwZWN0X3Rlc3RfY29uZmlnX3R5cGVzID1cbiAgRXhwZWN0X3Rlc3RfY29uZmlnX3R5cGVzX2ludGYuRXhwZWN0X3Rlc3RfY29uZmlnX3R5cGVzXG5cbm1vZHVsZSBVcG9uX3VucmVsZWFzYWJsZV9pc3N1ZSA9IHN0cnVjdFxuICBpbmNsdWRlIEV4cGVjdF90ZXN0X2NvbmZpZ190eXBlc19pbnRmLlVwb25fdW5yZWxlYXNhYmxlX2lzc3VlXG5cbiAgbGV0IGVxdWFsIHQxIHQyID0gdDEgPSB0MlxuXG4gIGxldCBjb21tZW50X3ByZWZpeCA9IGZ1bmN0aW9uXG4gICAgfCBgQ1IgLT4gXCJDUiBcIlxuICAgIHwgYFdhcm5pbmdfZm9yX2NvbGxlY3Rvcl90ZXN0aW5nIC0+IFwiXCJcbiAgOztcblxuICBsZXQgbWVzc2FnZV93aGVuX2V4cGVjdGF0aW9uX2NvbnRhaW5zX2JhY2t0cmFjZSB0ID1cbiAgICBQcmludGYuc3ByaW50ZlxuICAgICAge3xcbigqICVzZXhwZWN0X3Rlc3RfY29sbGVjdG9yOiBUaGlzIHRlc3QgZXhwZWN0YXRpb24gYXBwZWFycyB0byBjb250YWluIGEgYmFja3RyYWNlLlxuICAgVGhpcyBpcyBzdHJvbmdseSBkaXNjb3VyYWdlZCBhcyBiYWNrdHJhY2VzIGFyZSBmcmFnaWxlLlxuICAgUGxlYXNlIGNoYW5nZSB0aGlzIHRlc3QgdG8gbm90IGluY2x1ZGUgYSBiYWNrdHJhY2UuICopXG5cbnx9XG4gICAgICAoY29tbWVudF9wcmVmaXggdClcbiAgOztcbmVuZFxuIl19
