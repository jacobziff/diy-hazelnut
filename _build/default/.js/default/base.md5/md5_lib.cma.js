// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.8.1

//# unitInfo: Provides: Md5_lib
//# unitInfo: Requires: Assert_failure, Stdlib__Digest
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Digest = global_data.Stdlib__Digest,
    Assert_failure = global_data.Assert_failure,
    empty = caml_call1(Stdlib_Digest[3], cst);
   function make(s){return s == empty ? empty : s;}
   var
    compare = runtime.caml_compare,
    _a_ = [0, "md5/src/md5_lib.ml", 16, 22];
   function to_binary(s){return s;}
   function of_binary_exn(s){
    if(runtime.caml_ml_string_length(s) === 16) return make(s);
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
   }
   var to_hex = Stdlib_Digest[10];
   function of_hex_exn(s){return make(caml_call1(Stdlib_Digest[11], s));}
   function string(s){return make(caml_call1(Stdlib_Digest[3], s));}
   function bytes(s){return make(caml_call1(Stdlib_Digest[4], s));}
   function subbytes(bytes, pos, len){
    return make(caml_call3(Stdlib_Digest[6], bytes, pos, len));
   }
   var
    Md5_lib =
      [0,
       compare,
       16,
       to_binary,
       of_binary_exn,
       make,
       to_hex,
       of_hex_exn,
       string,
       bytes,
       subbytes];
   runtime.caml_register_global(4, Md5_lib, "Md5_lib");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJtZDVfbGliLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJlbXB0eSIsIm1ha2UiLCJzIiwiY29tcGFyZSIsInRvX2JpbmFyeSIsIm9mX2JpbmFyeV9leG4iLCJ0b19oZXgiLCJvZl9oZXhfZXhuIiwic3RyaW5nIiwiYnl0ZXMiLCJzdWJieXRlcyIsInBvcyIsImxlbiJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYWNvYnppZmYvLm9wYW0vZGl5LWhhemVsbnV0L2xpYi9iYXNlL21kNS9tZDVfbGliLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztHOzs7OztHOzs7OztHQUdZOzs7OztJQUFSQSxRQUFRO1lBQ1JDLEtBQUtDLEdBQ1AsT0FET0EsS0FETEYsUUFBQUEsUUFDS0UsRUFJSjs7SUFFREM7O1lBSUFDLFVBQVVGLEdBQUksT0FBSkEsRUFBSztZQUNmRyxjQUFjSDtJQUFJLGlDQUFKQSxXQUF1QyxPQVhyREQsS0FXY0M7SUFBSSxNQUFBO0dBQXlDO09BRzNESTtZQUNBQyxXQUFXTCxHQUFJLE9BZmZELEtBZW9CLDhCQUFUQyxJQUE0QjtZQUV2Q00sT0FBT04sR0FBSSxPQWpCWEQsS0FpQmdCLDZCQUFUQyxJQUEwQjtZQUVqQ08sTUFBTVAsR0FBSSxPQW5CVkQsS0FtQmUsNkJBQVRDLElBQXlCO1lBRS9CUSxTQUFTRCxPQUFPRSxLQUFLQztJQUFNLE9BckIzQlgsS0FxQmdDLDZCQUF2QlEsT0FBT0UsS0FBS0M7R0FBMEM7Ozs7T0FmL0RUOztPQUlBQztPQUNBQztPQVhBSjtPQWNBSztPQUNBQztPQUVBQztPQUVBQztPQUVBQzs7O0UiLCJzb3VyY2VzQ29udGVudCI6WyJ0eXBlIHQgPSBzdHJpbmdcblxuKCogU2hhcmUgdGhlIGRpZ2VzdCBvZiB0aGUgZW1wdHkgc3RyaW5nICopXG5sZXQgZW1wdHkgPSBEaWdlc3Quc3RyaW5nIFwiXCJcbmxldCBtYWtlIHMgPVxuICBpZiBzID0gZW1wdHkgdGhlblxuICAgIGVtcHR5XG4gIGVsc2VcbiAgICBzXG5cbmxldCBjb21wYXJlID0gY29tcGFyZVxuXG5sZXQgbGVuZ3RoID0gMTZcblxubGV0IHRvX2JpbmFyeSBzID0gc1xubGV0IG9mX2JpbmFyeV9leG4gcyA9IGFzc2VydCAoU3RyaW5nLmxlbmd0aCBzID0gbGVuZ3RoKTsgbWFrZSBzXG5sZXQgdW5zYWZlX29mX2JpbmFyeSA9IG1ha2VcblxubGV0IHRvX2hleCA9IERpZ2VzdC50b19oZXhcbmxldCBvZl9oZXhfZXhuIHMgPSBtYWtlIChEaWdlc3QuZnJvbV9oZXggcylcblxubGV0IHN0cmluZyBzID0gbWFrZSAoRGlnZXN0LnN0cmluZyBzKVxuXG5sZXQgYnl0ZXMgcyA9IG1ha2UgKERpZ2VzdC5ieXRlcyBzKVxuXG5sZXQgc3ViYnl0ZXMgYnl0ZXMgfnBvcyB+bGVuID0gbWFrZSAoRGlnZXN0LnN1YmJ5dGVzIGJ5dGVzIHBvcyBsZW4pXG4iXX0=
